	TCut cut_PlotAll  = "";
	//TCut cut_PlotAll  = "TraceMaxPMT1<=13500 && TraceMaxPMT2<=12500 && S1peaks_bot==2 && S2time_bot>S1time_bot && S1totalPE>S1totalPE1 && S1time_bot < S1time1_bot && abs(S2maxposRawPMT1[0]-S2maxposRawPMT2[0])/100<0.8";

	//////////////////////////////////////////////////////////////////////////////////////
	// PLOT
	int nbins_S1		= 500;
	double min_S1		= 0;
	double max_S1		= 1e3;

	int nbins_S1raw		= 400;
	double min_S1raw	= 0;
	double max_S1raw	= 5e3;

	int nbins_S2		= 400;
	double min_S2		= 0;
	double max_S2		= 5.0e5;

	int nbins_S2bot		= 400;
	double min_S2bot	= 0;
	double max_S2bot	= 5.0e5;

	int nbins_S2raw		= 400;
	double min_S2raw	= 0;
	double max_S2raw	= 1e6;

	int nbins_dt		= 200;
	double min_dt		= 0.;
	double max_dt		= 20.;

	int nbins_S1delay	= 1400;//720;
	double min_S1delay	= -36.;//0.;
	double max_S1delay	= 36.;//36.;

	int nbins_S2delay	= 880;//440;
	double min_S2delay	= -22.;//0.;
	double max_S2delay	= 22.;//22.;

	int nbins_S2width	= 101;
	double min_S2width	= 0.0;
	double max_S2width	= 1.0;

	int nbins_S2height	= 200;
	double min_S2height	= 0.0;
	double max_S2height	= 15000;

	int nbins_S1width	= 200;
	double min_S1width	= 0.0;
	double max_S1width	= 20;

	int nbins_chi2		= 200;
	double min_chi2		= 0.;
	double max_chi2		= 0.05;

	double max_logS2S1	= 3.5;

	TH2F *h2_NS2vsNS1top 					= new TH2F("h2_NS2vsNS1top",					DataSetName1, 	25, 0, 5, 	25, 0, 5);
	TH2F *h2_NS2vsNS1bot 					= new TH2F("h2_NS2vsNS1bot",					DataSetName1, 	25, 0, 5, 	25, 0, 5);
		  h2_NS2vsNS1top	->SetMarkerColor(2);
		  h2_NS2vsNS1bot	->SetMarkerColor(3);
	TH1F *h1_S1 							= new TH1F("h1_S1",								DataSetName1, 	nbins_S1, 			min_S1, 		max_S1);
	TH1F *h1_S10 							= new TH1F("h1_S10",							DataSetName1, 	nbins_S1, 			min_S1, 		max_S1);
	TH1F *h1_S11 							= new TH1F("h1_S11",							DataSetName1, 	nbins_S1, 			min_S1, 		max_S1);
	TH1F *h1_S1top 							= new TH1F("h1_S1top",							DataSetName1, 	nbins_S1, 			min_S1, 		max_S1);
	TH1F *h1_S1bot 							= new TH1F("h1_S1bot",							DataSetName1, 	nbins_S1, 			min_S1, 		max_S1);
		  h1_S1			->SetLineColor(1);
		  h1_S1top		->SetLineColor(2);
		  h1_S1bot		->SetLineColor(3);

	TH1F *h1_S1_raw 						= new TH1F("h1_S1_raw",							DataSetName1, 	nbins_S1raw, 		min_S1raw, 		max_S1raw);
	TH1F *h1_S1top_raw 						= new TH1F("h1_S1top_raw",						DataSetName1, 	nbins_S1raw, 		min_S1raw, 		max_S1raw);
	TH1F *h1_S1bot_raw 						= new TH1F("h1_S1bot_raw",						DataSetName1, 	nbins_S1raw, 		min_S1raw, 		max_S1raw);
		  h1_S1_raw		->SetLineColor(1);
		  h1_S1top_raw	->SetLineColor(2);
		  h1_S1bot_raw	->SetLineColor(3);
	
	TH2F *h2_S1chi2vsS1top 					= new TH2F("h2_S1chi2vsS1top",					DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_chi2, 		min_chi2, 		max_chi2);
	TH2F *h2_S1chi2vsS1bot 					= new TH2F("h2_S1chi2vsS1bot",					DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_chi2, 		min_chi2, 		max_chi2);

	TH2F *h2_S1vsS1							= new TH2F("h2_S1vsS1",							DataSetName1, 	nbins_S1/8, 		min_S1, 		max_S1, 		nbins_S1/8, 		min_S1, 		max_S1/4);
	TH2F *h2_S1vsS1_scat 					= new TH2F("h2_S1vsS1_scat",					DataSetName1, 	nbins_S1*10, 		min_S1, 		max_S1, 		nbins_S1*10, 		min_S1, 		max_S1/4);
	TH2F *h2_S1TOPvsS1TOP 					= new TH2F("h2_S1TOPvsS1TOP",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1/4, 		nbins_S1, 			min_S1, 		max_S1/8);
	TH2F *h2_S1TOPvsS1TOP_scat 				= new TH2F("h2_S1TOPvsS1TOP_scat",				DataSetName1, 	nbins_S1*10, 		min_S1, 		max_S1/4, 		nbins_S1*10, 		min_S1, 		max_S1/8);
	TH2F *h2_S1BOTvsS1BOT 					= new TH2F("h2_S1BOTvsS1BOT",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1, 		nbins_S1, 			min_S1, 		max_S1/4);
	TH2F *h2_S1BOTvsS1BOT_scat 				= new TH2F("h2_S1BOTvsS1BOT_scat",				DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S1, 			min_S1, 		max_S1/4);

	TH1F *h1_S2 							= new TH1F("h1_S2",								DataSetName1, 	nbins_S2, 			min_S2, 		max_S2);
	TH1F *h1_S2top 							= new TH1F("h1_S2top",							DataSetName1, 	nbins_S2, 			min_S2, 		max_S2);
	TH1F *h1_S2bot 							= new TH1F("h1_S2bot",							DataSetName1, 	nbins_S2bot, 		min_S2bot, 		max_S2bot);
		  h1_S2			->SetLineColor(1);
		  h1_S2top		->SetLineColor(2);
		  h1_S2bot		->SetLineColor(3);

	TH1F *h1_S2_raw 						= new TH1F("h1_S2_raw",							DataSetName1, 	nbins_S2raw, 		min_S2raw, 	max_S2raw);
	TH1F *h1_S2top_raw 						= new TH1F("h1_S2top_raw",						DataSetName1, 	nbins_S2raw, 		min_S2raw, 	max_S2raw);
	TH1F *h1_S2bot_raw 						= new TH1F("h1_S2bot_raw",						DataSetName1, 	nbins_S2raw, 		min_S2raw, 	max_S2bot);
		  h1_S2_raw		->SetLineColor(1);
		  h1_S2top_raw	->SetLineColor(2);
		  h1_S2bot_raw	->SetLineColor(3);

	TH1F *h1_S2TOP 							= new TH1F("h1_S2TOP",							DataSetName1, 	nbins_S2, 			min_S2, 		max_S2);
	TH1F *h1_S2BOT 							= new TH1F("h1_S2BOT",							DataSetName1, 	nbins_S2bot, 		min_S2bot, 		max_S2bot);

	TH1F *h1_S2WIDTHtop 					= new TH1F("h1_S2WIDTHtop",						DataSetName1, 	nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH1F *h1_S2WIDTHbot 					= new TH1F("h1_S2WIDTHbot",						DataSetName1, 	nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH1F *h1_S2WIDTHLOWtop 					= new TH1F("h1_S2WIDTHLOWtop",					DataSetName1, 	nbins_S2width/2, 	min_S2width, 	max_S2width*2);
	TH1F *h1_S2WIDTHLOWbot 					= new TH1F("h1_S2WIDTHLOWbot",					DataSetName1, 	nbins_S2width/2, 	min_S2width, 	max_S2width*2);
	TH2F *h2_S2WIDTHTOPvsDT 				= new TH2F("h2_S2WIDTHTOPvsDT",					DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH2F *h2_S2WIDTHBOTvsDT 				= new TH2F("h2_S2WIDTHBOTvsDT",					DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH2F *h2_S2WIDTHLOWTOPvsDT 				= new TH2F("h2_S2WIDTHLOWTOPvsDT",				DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S2width, 		min_S2width, 	max_S2width*2);
	TH2F *h2_S2WIDTHLOWBOTvsDT 				= new TH2F("h2_S2WIDTHLOWBOTvsDT",				DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S2width, 		min_S2width, 	max_S2width*2);
	TH2F *h2_S2WIDTHTOPvsS2TOP 				= new TH2F("h2_S2WIDTHTOPvsS2TOP",				DataSetName1, 	nbins_S2/4, 		min_S2, 		max_S2, 		nbins_S2width/8, 	min_S2width, 	max_S2width);
	TH2F *h2_S2WIDTHBOTvsS2BOT 				= new TH2F("h2_S2WIDTHBOTvsS2BOT",				DataSetName1, 	nbins_S2, 			min_S2, 		max_S2, 		nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH2F *h2_S2WIDTHLOWTOPvsS2TOP 			= new TH2F("h2_S2WIDTHLOWTOPvsS2TOP",			DataSetName1, 	nbins_S2, 			min_S2, 		max_S2, 		nbins_S2width, 		min_S2width, 	max_S2width*2);
	TH2F *h2_S2WIDTHLOWBOTvsS2BOT 			= new TH2F("h2_S2WIDTHLOWBOTvsS2BOT",			DataSetName1, 	nbins_S2, 			min_S2, 		max_S2, 		nbins_S2width, 		min_S2width, 	max_S2width*2);
	TH2F *h2_S1WIDTHvsS1 					= new TH2F("h2_S1WIDTHvsS1",					DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S1width/2, 	min_S1width, 	max_S1width);
	TH2F *h2_S1WIDTHLOWvsS1 				= new TH2F("h2_S1WIDTHLOWvsS1",					DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S1width, 		min_S1width, 	max_S1width*2);
	TH2F *h2_S2WIDTHoverHEIGHTTOPvsS2TOP 	= new TH2F("h2_S2WIDTHoverHEIGHTTOPvsS2TOP",	DataSetName1, 	nbins_S2, 			min_S2, 		max_S2, 		nbins_S2, 			1e-3, 			1e-1);
	TH2F *h2_S2WIDTHoverHEIGHTBOTvsS2BOT 	= new TH2F("h2_S2WIDTHoverHEIGHTBOTvsS2BOT",	DataSetName1, 	nbins_S2, 			min_S2, 		max_S2, 		nbins_S2, 			1e-3, 			1e-1);
	TH2F *h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP = new TH2F("h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP",	DataSetName1, 	nbins_S2*10, 		min_S2,	 		max_S2, 		nbins_S2*10, 		1e-3, 			1e-1);
	TH2F *h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT = new TH2F("h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT",	DataSetName1, 	nbins_S2*10, 		min_S2,	 		max_S2, 		nbins_S2*10, 		1e-3, 			1e-1);
	TH2F *h2_S2WIDTHvsHEIGHTTOP 			= new TH2F("h2_S2WIDTHvsHEIGHTTOP",				DataSetName1, 	nbins_S2height, 	min_S2height, 	max_S2height, 	nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH2F *h2_S2WIDTHvsHEIGHTBOT 			= new TH2F("h2_S2WIDTHvsHEIGHTBOT",				DataSetName1, 	nbins_S2height, 	min_S2height, 	max_S2height, 	nbins_S2width/2, 	min_S2width, 	max_S2width);
	TH2F *h2_S2WIDTHLOWvsHEIGHTTOP 			= new TH2F("h2_S2WIDTHLOWvsHEIGHTTOP",			DataSetName1, 	nbins_S2height, 	min_S2height, 	max_S2height, 	nbins_S2width, 		min_S2width, 	max_S2width*2);
	TH2F *h2_S2WIDTHLOWvsHEIGHTBOT 			= new TH2F("h2_S2WIDTHLOWvsHEIGHTBOT",			DataSetName1, 	nbins_S2height, 	min_S2height, 	max_S2height, 	nbins_S2width, 		min_S2width, 	max_S2width*2);

	TH1F *h1_DT 							= new TH1F("h1_DT",								DataSetName1, 	nbins_dt, 			min_dt, 		max_dt);
	TH1F *h1_S1delayTop 					= new TH1F("h1_S1delayTop",						DataSetName1, 	nbins_S1delay, 		min_S1delay, 	max_S1delay);
	TH1F *h1_S1delayBot 					= new TH1F("h1_S1delayBot",						DataSetName1, 	nbins_S1delay, 		min_S1delay, 	max_S1delay);
		  h1_S1delayTop	->SetLineColor(2);
		  h1_S1delayBot	->SetLineColor(3);
	TH1F *h1_S2delayTop 					= new TH1F("h1_S2delayTop",						DataSetName1, 	nbins_S2delay, 		min_S2delay, 	max_S2delay);
	TH1F *h1_S2delayBot 					= new TH1F("h1_S2delayBot",						DataSetName1, 	nbins_S2delay, 		min_S2delay, 	max_S2delay);
		  h1_S2delayTop	->SetLineColor(2);
		  h1_S2delayBot	->SetLineColor(3);

	TH2F *h2_S2RATIOvsS2delayTop 			= new TH2F("h2_S2RATIOvsS2delayTop",			DataSetName1, 	nbins_S2delay/10, 	min_S2delay, 	max_S2delay, 	100, 	0.,	1.);
	TH2F *h2_S2RATIOvsS2delayBot 			= new TH2F("h2_S2RATIOvsS2delayBot",			DataSetName1, 	nbins_S2delay/10, 	min_S2delay, 	max_S2delay, 	100, 	0.,	1.);

	TH2F *h2_S1vsDT 						= new TH2F("h2_S1vsDT",							DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S1, 			min_S1, 		max_S1);
	TH2F *h2_S1TOPvsDT 						= new TH2F("h2_S1TOPvsDT",						DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S1, 			min_S1, 		max_S1);
	TH2F *h2_S1BOTvsDT 						= new TH2F("h2_S1BOTvsDT",						DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S1, 			min_S1, 		max_S1);
	TH2F *h2_S1vsDT_toFit 					= new TH2F("h2_S1vsDT_toFit",					DataSetName1, 	nbins_dt/4, 		min_dt, 		max_dt, 		nbins_S1/10, 		min_S1, 		max_S1);
	TH2F *h2_cS1vsDT 						= new TH2F("h2_cS1vsDT",						DataSetName1, 	nbins_dt, 			min_dt, 		max_dt, 		nbins_S1, 			min_S1, 		max_S1);
	TH2F *h2_S2vsDT 						= new TH2F("h2_S2vsDT",							DataSetName1, 	nbins_dt/10, 		min_dt, 		max_dt, 		nbins_S2, 			min_S2, 		max_S2);
	TH2F *h2_S2TOPvsDT 						= new TH2F("h2_S2TOPvsDT",						DataSetName1, 	nbins_dt/10, 		min_dt, 		max_dt, 		nbins_S2, 			min_S2, 		max_S2);
	TH2F *h2_S2BOTvsDT 						= new TH2F("h2_S2BOTvsDT",						DataSetName1, 	nbins_dt/10, 		min_dt, 		max_dt, 		nbins_S2bot,	 	min_S2bot, 		max_S2bot);

	TH2F *h2_S2vsS1 						= new TH2F("h2_S2vsS1",							DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S2, 			min_S2, 		max_S2);
	TH2F *h2_S2TOPvsS1 						= new TH2F("h2_S2TOPvsS1",						DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S2, 			min_S2, 		max_S2);
	TH2F *h2_S2TOPvsCS1 					= new TH2F("h2_S2TOPvsCS1",						DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S2, 			min_S2, 		max_S2);
	TH2F *h2_S2BOTvsS1 						= new TH2F("h2_S2BOTvsS1",						DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S2, 			min_S2, 		max_S2);
	TH2F *h2_S2BOTvsS1TOP 					= new TH2F("h2_S2BOTvsS1TOP",					DataSetName1, 	nbins_S1/5, 		min_S1, 		max_S1, 		nbins_S2bot/5, 		min_S2bot, 		max_S2bot);
	TH2F *h2_LOGS2S1vsS1 					= new TH2F("h2_LOGS2S1vsS1",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1, 		nbins_S2/2, 		0.0, 			max_logS2S1);
	TH2F *h2_LOGS2S1vsS1_scat 				= new TH2F("h2_LOGS2S1vsS1_scat",				DataSetName1, 	nbins_S1*10, 		min_S1, 		max_S1, 		nbins_S2*10, 		0.0, 			max_logS2S1);
		  h2_LOGS2S1vsS1_scat ->SetMarkerStyle(4);
		  h2_LOGS2S1vsS1_scat ->SetMarkerSize(0.6);
		  h2_LOGS2S1vsS1_scat ->SetMarkerColor(2);
	TH2F *h2_LOGS2TOPS1vsS1 				= new TH2F("h2_LOGS2TOPS1vsS1",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1, 		nbins_S2/2, 		0.0, 			max_logS2S1);
	TH2F *h2_LOGS2BOTS1vsS1 				= new TH2F("h2_LOGS2BOTS1vsS1",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1, 		nbins_S2/2, 		0.0, 			max_logS2S1);
	TH2F *h2_LOGS2S1vsS1SUM 				= new TH2F("h2_LOGS2S1vsS1SUM",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1, 		nbins_S2/2, 		0.0, 			max_logS2S1);

	TH2F *h2_S2vsS2 						= new TH2F("h2_S2vsS2",							DataSetName1, 	nbins_S2/2, 		min_S2, 		max_S2, 		nbins_S2/2, 		min_S2, 		max_S2/50);
	TH2F *h2_S2TOPvsS2TOP 					= new TH2F("h2_S2TOPvsS2TOP",					DataSetName1, 	nbins_S2/2, 		min_S2, 		max_S2, 		nbins_S2/2, 		min_S2, 		max_S2);
	TH2F *h2_S2BOTvsS2BOT 					= new TH2F("h2_S2BOTvsS2BOT",					DataSetName1, 	nbins_S2bot/2, 		min_S2bot, 		max_S2bot, 		nbins_S2bot/2, 		min_S2bot, 		max_S2bot/10);
	TH2F *h2_S2TOPvsS2BOT 					= new TH2F("h2_S2TOPvsS2BOT",					DataSetName1, 	nbins_S2, 			min_S2, 		max_S2, 		nbins_S2, 			min_S2, 		max_S2);

	TH2F *h2_S1ASYMvsS1 					= new TH2F("h2_S1ASYMvsS1",						DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1, 		nbins_S1/2, 		-1.0, 			+1.0);
	TH2F *h2_S1ASYM1vsS1 					= new TH2F("h2_S1ASYM1vsS1",					DataSetName1, 	nbins_S1/2, 		min_S1, 		max_S1/8, 		nbins_S1/8, 		-1.0, 			+1.0);
	TH2F *h2_S1ASYMvsDT 					= new TH2F("h2_S1ASYMvsDT",						DataSetName1, 	nbins_dt/2, 		min_dt, 		max_dt, 		nbins_S1/2, 		-1.0, 			+1.0);
	TH2F *h2_S2ASYMvsS2 					= new TH2F("h2_S2ASYMvsS2",						DataSetName1, 	nbins_S2/4, 		min_S2, 		max_S2, 		nbins_S2/8, 		-1.0, 			+1.0);
	TH2F *h2_S2ASYMvsS2TOP 					= new TH2F("h2_S2ASYMvsS2TOP",					DataSetName1, 	nbins_S2/4, 		min_S2, 		max_S2, 		nbins_S2/8, 		-1.0, 			+1.0);
	TH2F *h2_S2ASYMvsS1 					= new TH2F("h2_S2ASYMvsS1",						DataSetName1, 	nbins_S1, 			min_S1, 		max_S1, 		nbins_S2/2, 		-1.0, 			+1.0);
	TH2F *h2_S2ASYMvsS1ASYM 				= new TH2F("h2_S2ASYMvsS1ASYM",					DataSetName1, 	nbins_S1/2, 		-1.0, 			+1.0, 			nbins_S1/2, 		-1.0, 			+1.0);

	TH2F *h2_S2HEIGHTTOPvsS2TOP 			= new TH2F("h2_S2HEIGHTTOPvsS2TOP",				DataSetName1, 	nbins_S2/4, 		min_S2, 		max_S2, 		nbins_S2height/4, 	min_S2height, 	max_S2height);
	TH2F *h2_S2HEIGHTBOTvsS2BOT 			= new TH2F("h2_S2HEIGHTBOTvsS2BOT",				DataSetName1, 	nbins_S2/4, 		min_S2, 		max_S2, 		nbins_S2height/4, 	min_S2height, 	max_S2height);

	TH2F *h2_S2DELAYvsS1DELAY 				= new TH2F("h2_S2DELAYvsS1DELAY",				DataSetName1, 	nbins_S1, 			0.0, 			5.0, 			100, 				0, 				5.0);


/*	TCanvas *c_NS2vsNS1 = new TCanvas("c_NS2vsNS1", "c_NS2vsNS1", 0, 0, 700, 500);
			 c_NS2vsNS1->SetFillColor(10);
    		 //c_NS2vsNS1->SetLogy();
		//T1 ->Draw("S2peaks_top:S1peaks_top>>h2_NS2vsNS1top",	cut_PlotAll,	"");
		//T1 ->Draw("S2peaks_bot:S1peaks_bot>>h2_NS2vsNS1bot",	cut_PlotAll,	"same");
		//h1_S1 	->Scale(ScalingFactor);
		//h1_S1 	->Scale(1e3);
		h2_NS2vsNS1top	-> GetXaxis() -> SetTitle("number of S1 peaks");
		h2_NS2vsNS1top	-> GetYaxis() -> SetTitle("number of S2 peaks");
		h2_NS2vsNS1top	-> GetXaxis() -> CenterTitle(true);
		h2_NS2vsNS1top	-> GetYaxis() -> CenterTitle(true);
	c_NS2vsNS1->Update();
*/

	TCanvas *c_S1 = new TCanvas("c_S1", "c_S1", 0, 0, 700, 500);
			 c_S1->SetFillColor(10);
    		 //c_S1->SetLogy();
		T1 ->Draw("S1topPE>>h1_S1top",	cut_PlotAll,	"");
		T1 ->Draw("S1botPE>>h1_S1bot",	cut_PlotAll,	"same");
		T1 ->Draw("S1totalPE>>h1_S1",	cut_PlotAll,	"same");
		//h1_S1 	->Scale(ScalingFactor);
		//h1_S1 	->Scale(1e3);
		h1_S1top	-> GetXaxis() -> SetTitle("S1 [PE]");
		h1_S1top	-> GetYaxis() -> SetTitle("Counts");
		h1_S1top	-> GetXaxis() -> CenterTitle(true);
		h1_S1top	-> GetYaxis() -> CenterTitle(true);
	c_S1->Update();

	TCanvas *c_S1_raw = new TCanvas("c_S1_raw", "c_S1_raw", 0, 0, 700, 500);
			 c_S1_raw->SetFillColor(10);
    		 //c_S1_raw->SetLogy();
		T1 ->Draw("S1top>>h1_S1top_raw",	cut_PlotAll,	"");
		T1 ->Draw("S1bot>>h1_S1bot_raw",	cut_PlotAll,	"same");
		T1 ->Draw("S1total>>h1_S1_raw",		cut_PlotAll,	"same");
		//h1_S1 	->Scale(ScalingFactor);
		//h1_S1 	->Scale(1e3);
		h1_S1top_raw	-> GetXaxis() -> SetTitle("S1 [raw]");
		h1_S1top_raw	-> GetYaxis() -> SetTitle("Counts");
		h1_S1top_raw	-> GetXaxis() -> CenterTitle(true);
		h1_S1top_raw	-> GetYaxis() -> CenterTitle(true);
	c_S1_raw->Update();

	TCanvas *c_S1chi2vsS1top = new TCanvas("c_S1chi2vsS1top", "c_S1chi2vsS1top", 0, 0, 700, 500);
			 c_S1chi2vsS1top->SetFillColor(10);
    		 c_S1chi2vsS1top->SetLogz();
		T1	->Draw("S1chi2top:S1topPE>>h2_S1chi2vsS1top", cut_PlotAll,	"COLZ");
		h2_S1chi2vsS1top	-> GetXaxis() -> SetTitle("largest S1[0] top [PE]");
		h2_S1chi2vsS1top	-> GetYaxis() -> SetTitle("#chi^{2}");
		h2_S1chi2vsS1top	-> GetXaxis() -> CenterTitle(true);
		h2_S1chi2vsS1top	-> GetYaxis() -> CenterTitle(true);
	c_S1chi2vsS1top->Update();

	TCanvas *c_S1chi2vsS1bot = new TCanvas("c_S1chi2vsS1bot", "c_S1chi2vsS1bot", 0, 0, 700, 500);
			 c_S1chi2vsS1bot->SetFillColor(10);
    		 c_S1chi2vsS1bot->SetLogz();
		T1	->Draw("S1chi2top:S1botPE>>h2_S1chi2vsS1bot", cut_PlotAll,	"COLZ");
		h2_S1chi2vsS1bot	-> GetXaxis() -> SetTitle("largest S1[0] bottom [PE]");
		h2_S1chi2vsS1bot	-> GetYaxis() -> SetTitle("#chi^{2}");
		h2_S1chi2vsS1bot	-> GetXaxis() -> CenterTitle(true);
		h2_S1chi2vsS1bot	-> GetYaxis() -> CenterTitle(true);
	c_S1chi2vsS1bot->Update();

	TCanvas *c_S1twoPeaks = new TCanvas("c_S1twoPeaks", "c_S1twoPeaks", 0, 0, 700, 500);
			 c_S1twoPeaks->SetFillColor(10);
    		 //c_S1twoPeaks->SetLogy();
		T1 ->Draw("S1totalPE>>h1_S10",	cut_PlotAll,	"");
		T1 ->Draw("S1totalPE1>>h1_S11",	cut_PlotAll,	"same");
		//h1_S1a 	->Scale(ScalingFactor);
		//h1_S1a 	->Scale(1e3);
		//h1_S1b 	->Scale(ScalingFactor);
		//h1_S1b 	->Scale(1e3);
		h1_S10	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h1_S10	-> GetYaxis() -> SetTitle("Counts");
		h1_S10	-> GetXaxis() -> CenterTitle(true);
		h1_S10	-> GetYaxis() -> CenterTitle(true);
	c_S1twoPeaks->Update();

	TCanvas *c_S2 = new TCanvas("c_S2", "c_S2", 0, 0, 700, 500);
			 c_S2->SetFillColor(10);
    		 //c_S2->SetLogy();
		T1	->Draw("S2topPE>>h1_S2top",	cut_PlotAll,	"");
		T1	->Draw("S2botPE>>h1_S2bot",	cut_PlotAll,	"same");
		T1	->Draw("S2totalPE>>h1_S2",	cut_PlotAll,	"same");
		//h1_S2	-> Scale(ScalingFactor);
		//h1_S2	-> Scale(1e3);
		h1_S2top	-> GetXaxis() -> SetTitle("S2 [PE]");
		h1_S2top	-> GetYaxis() -> SetTitle("Counts");
		h1_S2top	-> GetXaxis() -> CenterTitle(true);
		h1_S2top	-> GetYaxis() -> CenterTitle(true);
	c_S2->Update();

	TCanvas *c_S2_raw = new TCanvas("c_S2_raw", "c_S2_raw", 0, 0, 700, 500);
			 c_S2_raw->SetFillColor(10);
    		 //c_S2_raw->SetLogy();
		T1	->Draw("S2top>>h1_S2top_raw",	cut_PlotAll,	"");
		T1	->Draw("S2bot>>h1_S2bot_raw",	cut_PlotAll,	"same");
		T1	->Draw("S2total>>h1_S2_raw",	cut_PlotAll,	"same");
		//h1_S2_raw	-> Scale(ScalingFactor);
		//h1_S2_raw	-> Scale(1e3);
		h1_S2top_raw	-> GetXaxis() -> SetTitle("S2 [raw]");
		h1_S2top_raw	-> GetYaxis() -> SetTitle("Counts");
		h1_S2top_raw	-> GetXaxis() -> CenterTitle(true);
		h1_S2top_raw	-> GetYaxis() -> CenterTitle(true);
	c_S2_raw->Update();

/*	TCanvas *c_S2TOP = new TCanvas("c_S2TOP", "c_S2TOP", 0, 0, 700, 500);
			 c_S2TOP->SetFillColor(10);
    		 //c_S2TOP->SetLogy();
		T1	->Draw("S2topPE>>h1_S2TOP",	cut_PlotAll,	"");
		//h1_S2TOP	-> Scale(ScalingFactor);
		//h1_S2TOP	-> Scale(1e3);
		h1_S2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h1_S2TOP	-> GetYaxis() -> SetTitle("Counts");
		h1_S2TOP	-> GetXaxis() -> CenterTitle(true);
		h1_S2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2TOP->Update();
*/
/*	TCanvas *c_S2BOT = new TCanvas("c_S2BOT", "c_S2BOT", 0, 0, 700, 500);
			 c_S2BOT->SetFillColor(10);
    		 //c_S2BOT->SetLogy();
		T1	->Draw("S2botPE>>h1_S2BOT",	cut_PlotAll,	"");
		//h1_S2BOT	-> Scale(ScalingFactor);
		//h1_S2BOT	-> Scale(1e3);
		h1_S2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h1_S2BOT	-> GetYaxis() -> SetTitle("Counts");
		h1_S2BOT	-> GetXaxis() -> CenterTitle(true);
		h1_S2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2BOT->Update();
*/
	TCanvas *c_S2WIDTHtop = new TCanvas("c_S2WIDTHtop", "c_S2WIDTHtop", 0, 0, 700, 500);
			 c_S2WIDTHtop->SetFillColor(10);
    		 //c_S2WIDTHtop->SetLogy();
		T1	->Draw("S2width_top>>h1_S2WIDTHtop",	cut_PlotAll,	"");
		//h1_S2WIDTHtop	-> Scale(ScalingFactor);
		//h1_S2WIDTHtop	-> Scale(1e3);
		h1_S2WIDTHtop	-> GetXaxis() -> SetTitle("S2 width (top) at 50% height [#mus]");
		h1_S2WIDTHtop	-> GetYaxis() -> SetTitle("Counts");
		h1_S2WIDTHtop	-> GetXaxis() -> CenterTitle(true);
		h1_S2WIDTHtop	-> GetYaxis() -> CenterTitle(true);
		h1_S2WIDTHtop	-> GetXaxis() -> SetTitleOffset(1.25);
		h1_S2WIDTHtop	-> GetYaxis() -> SetTitleOffset(1.30);
	c_S2WIDTHtop->Update();

	TCanvas *c_S2WIDTHbot = new TCanvas("c_S2WIDTHbot", "c_S2WIDTHbot", 0, 0, 700, 500);
			 c_S2WIDTHbot->SetFillColor(10);
    		 //c_S2WIDTHbot->SetLogy();
		T1	->Draw("S2width_bot>>h1_S2WIDTHbot",	cut_PlotAll,	"");
		//h1_S2WIDTHbot	-> Scale(ScalingFactor);
		//h1_S2WIDTHbot	-> Scale(1e3);
		h1_S2WIDTHbot	-> GetXaxis() -> SetTitle("S2 width (bottom) at 50% height [#mus]");
		h1_S2WIDTHbot	-> GetYaxis() -> SetTitle("Counts");
		h1_S2WIDTHbot	-> GetXaxis() -> CenterTitle(true);
		h1_S2WIDTHbot	-> GetYaxis() -> CenterTitle(true);
		h1_S2WIDTHbot	-> GetXaxis() -> SetTitleOffset(1.25);
		h1_S2WIDTHbot	-> GetYaxis() -> SetTitleOffset(1.30);
	c_S2WIDTHbot->Update();

	TCanvas *c_S2WIDTHLOWtop = new TCanvas("c_S2WIDTHLOWtop", "c_S2WIDTHLOWtop", 0, 0, 700, 500);
			 c_S2WIDTHLOWtop->SetFillColor(10);
    		 //c_S2WIDTHLOWtop->SetLogy();
		T1	->Draw("S2widthLow_top>>h1_S2WIDTHLOWtop",	cut_PlotAll,	"");
		//h1_S2WIDTHLOWtop	-> Scale(ScalingFactor);
		//h1_S2WIDTHLOWtop	-> Scale(1e3);
		h1_S2WIDTHLOWtop	-> GetXaxis() -> SetTitle("S2 width (top) at 10% height [#mus]");
		h1_S2WIDTHLOWtop	-> GetYaxis() -> SetTitle("Counts");
		h1_S2WIDTHLOWtop	-> GetXaxis() -> CenterTitle(true);
		h1_S2WIDTHLOWtop	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWtop->Update();

	TCanvas *c_S2WIDTHLOWbot = new TCanvas("c_S2WIDTHLOWbot", "c_S2WIDTHLOWbot", 0, 0, 700, 500);
			 c_S2WIDTHLOWbot->SetFillColor(10);
    		 //c_S2WIDTHLOWbot->SetLogy();
		T1	->Draw("S2widthLow_bot>>h1_S2WIDTHLOWbot",	cut_PlotAll,	"");
		//h1_S2WIDTHLOWbot	-> Scale(ScalingFactor);
		//h1_S2WIDTHLOWbot	-> Scale(1e3);
		h1_S2WIDTHLOWbot	-> GetXaxis() -> SetTitle("S2 width (bottom) at 10% height [#mus]");
		h1_S2WIDTHLOWbot	-> GetYaxis() -> SetTitle("Counts");
		h1_S2WIDTHLOWbot	-> GetXaxis() -> CenterTitle(true);
		h1_S2WIDTHLOWbot	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWbot->Update();

	TCanvas *c_S2vsS1 = new TCanvas("c_S2vsS1", "c_S2vsS1", 0, 0, 700, 500);
			 c_S2vsS1->SetFillColor(10);
    		 c_S2vsS1->SetLogz();
		T1	->Draw("S2totalPE:S1totalPE>>h2_S2vsS1",	cut_PlotAll,	"COLZ");
		//h2_S2vsS1	-> Scale(ScalingFactor);
		h2_S2vsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_S2vsS1	-> GetYaxis() -> SetTitle("S2 total [PE]");
		h2_S2vsS1	-> GetZaxis() -> SetTitle("Counts");
		h2_S2vsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S2vsS1	-> GetYaxis() -> CenterTitle(true);
		h2_S2vsS1	-> GetZaxis() -> CenterTitle(true);
	c_S2vsS1->Update();

	TCanvas *c_S2TOPvsS1 = new TCanvas("c_S2TOPvsS1", "c_S2TOPvsS1", 0, 0, 700, 500);
			 c_S2TOPvsS1->SetFillColor(10);
    		 c_S2TOPvsS1->SetLogz();
		T1	->Draw("S2topPE:S1totalPE>>h2_S2TOPvsS1",	cut_PlotAll,	"COLZ");
		//h2_S2TOPvsS1	-> Scale(ScalingFactor);
		h2_S2TOPvsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_S2TOPvsS1	-> GetYaxis() -> SetTitle("S2 top [PE]");
		h2_S2TOPvsS1	-> GetZaxis() -> SetTitle("Counts");
		h2_S2TOPvsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S2TOPvsS1	-> GetYaxis() -> CenterTitle(true);
		h2_S2TOPvsS1	-> GetZaxis() -> CenterTitle(true);
	c_S2TOPvsS1->Update();

	TCanvas *c_S2TOPvsCS1 = new TCanvas("c_S2TOPvsCS1", "c_S2TOPvsCS1", 0, 0, 700, 500);
			 c_S2TOPvsCS1->SetFillColor(10);
    		 c_S2TOPvsCS1->SetLogz();
		T1	->Draw("S2topPE:cS1totalPE>>h2_S2TOPvsCS1",	cut_PlotAll,	"COLZ");
		//h2_S2TOPvsS1	-> Scale(ScalingFactor);
		h2_S2TOPvsCS1	-> GetXaxis() -> SetTitle("S1 total, dt-corrected [PE]");
		h2_S2TOPvsCS1	-> GetYaxis() -> SetTitle("S2 top [PE]");
		h2_S2TOPvsCS1	-> GetZaxis() -> SetTitle("Counts");
		h2_S2TOPvsCS1	-> GetXaxis() -> CenterTitle(true);
		h2_S2TOPvsCS1	-> GetYaxis() -> CenterTitle(true);
		h2_S2TOPvsCS1	-> GetZaxis() -> CenterTitle(true);
	c_S2TOPvsCS1->Update();

	TCanvas *c_S2BOTvsS1 = new TCanvas("c_S2BOTvsS1", "c_S2BOTvsS1", 0, 0, 700, 500);
			 c_S2BOTvsS1->SetFillColor(10);
    		 c_S2BOTvsS1->SetLogz();
		T1	->Draw("S2botPE:S1totalPE>>h2_S2BOTvsS1",	cut_PlotAll,	"COLZ");
		//h2_S2BOTvsS1	-> Scale(ScalingFactor);
		h2_S2BOTvsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_S2BOTvsS1	-> GetYaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2BOTvsS1	-> GetZaxis() -> SetTitle("Counts");
		h2_S2BOTvsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S2BOTvsS1	-> GetYaxis() -> CenterTitle(true);
		h2_S2BOTvsS1	-> GetZaxis() -> CenterTitle(true);
	c_S2BOTvsS1->Update();

	TCanvas *c_S2BOTvsS1TOP = new TCanvas("c_S2BOTvsS1TOP", "c_S2BOTvsS1TOP", 0, 0, 700, 500);
			 c_S2BOTvsS1TOP->SetFillColor(10);
    		 c_S2BOTvsS1TOP->SetLogz();
		T1	->Draw("S2botPE:S1topPE>>h2_S2BOTvsS1TOP",	cut_PlotAll,	"COLZ");
		//h2_S2BOTvsS1	-> Scale(ScalingFactor);
		h2_S2BOTvsS1TOP	-> GetXaxis() -> SetTitle("S1 top [PE]");
		h2_S2BOTvsS1TOP	-> GetYaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2BOTvsS1TOP	-> GetZaxis() -> SetTitle("Counts");
		h2_S2BOTvsS1TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2BOTvsS1TOP	-> GetYaxis() -> CenterTitle(true);
		h2_S2BOTvsS1TOP	-> GetZaxis() -> CenterTitle(true);
	c_S2BOTvsS1TOP->Update();

	TCanvas *c_S2TOPvsS2BOT = new TCanvas("c_S2TOPvsS2BOT", "c_S2TOPvsS2BOT", 0, 0, 700, 500);
			 c_S2TOPvsS2BOT->SetFillColor(10);
    		 c_S2TOPvsS2BOT->SetLogz();
		T1	->Draw("S2topPE:S2botPE>>h2_S2TOPvsS2BOT",	cut_PlotAll,	"COLZ");
		//h2_S2TOPvsS2BOT	-> Scale(ScalingFactor);
		h2_S2TOPvsS2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2TOPvsS2BOT	-> GetYaxis() -> SetTitle("S2 top [PE]");
		h2_S2TOPvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2TOPvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2TOPvsS2BOT->Update();

	TCanvas *c_LOGS2S1vsS1 = new TCanvas("c_LOGS2S1vsS1", "c_LOGS2S1vsS1", 0, 0, 700, 500);
			 c_LOGS2S1vsS1->SetFillColor(10);
    		 c_LOGS2S1vsS1->SetLogz();
		T1	->Draw("TMath::Log10(S2totalPE/S1totalPE):S1totalPE>>h2_LOGS2S1vsS1",	cut_PlotAll,	"COLZ");
		//h2_LOGS2S1vsS1	-> Scale(ScalingFactor);
		h2_LOGS2S1vsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_LOGS2S1vsS1	-> GetYaxis() -> SetTitle("log_{10}(S2_{tot}/S1)");
		h2_LOGS2S1vsS1	-> GetXaxis() -> CenterTitle(true);
		h2_LOGS2S1vsS1	-> GetYaxis() -> CenterTitle(true);
	c_LOGS2S1vsS1->Update();	

/*	TCanvas *c_LOGS2S1vsS1_scat = new TCanvas("c_LOGS2S1vsS1_scat", "c_LOGS2S1vsS1_scat", 0, 0, 700, 500);
			 c_LOGS2S1vsS1_scat->SetFillColor(10);
    		 c_LOGS2S1vsS1_scat->SetLogz();
		T1	->Draw("TMath::Log10(S2totalPE/S1totalPE):S1totalPE>>h2_LOGS2S1vsS1_scat",	cut_PlotAll,	"");
		//h2_LOGS2S1vsS1_scat	-> Scale(ScalingFactor);
		h2_LOGS2S1vsS1_scat	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_LOGS2S1vsS1_scat	-> GetYaxis() -> SetTitle("log_{10}(S2_{tot}/S1)");
		h2_LOGS2S1vsS1_scat	-> GetXaxis() -> CenterTitle(true);
		h2_LOGS2S1vsS1_scat	-> GetYaxis() -> CenterTitle(true);
	c_LOGS2S1vsS1_scat->Update();	
*/
	TCanvas *c_LOGS2TOPS1vsS1 = new TCanvas("c_LOGS2TOPS1vsS1", "c_LOGS2TOPS1vsS1", 0, 0, 700, 500);
			 c_LOGS2TOPS1vsS1->SetFillColor(10);
    		 c_LOGS2TOPS1vsS1->SetLogz();
		T1	->Draw("TMath::Log10(S2topPE/S1totalPE):S1totalPE>>h2_LOGS2TOPS1vsS1",	cut_PlotAll,	"COLZ");
		//h2_LOGS2TOPS1vsS1	-> Scale(ScalingFactor);
		h2_LOGS2TOPS1vsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_LOGS2TOPS1vsS1	-> GetYaxis() -> SetTitle("log_{10}(S2_{top}/S1)");
		h2_LOGS2TOPS1vsS1	-> GetXaxis() -> CenterTitle(true);
		h2_LOGS2TOPS1vsS1	-> GetYaxis() -> CenterTitle(true);
	c_LOGS2TOPS1vsS1->Update();	

	TCanvas *c_LOGS2BOTS1vsS1 = new TCanvas("c_LOGS2BOTS1vsS1", "c_LOGS2BOTS1vsS1", 0, 0, 700, 500);
			 c_LOGS2BOTS1vsS1->SetFillColor(10);
    		 c_LOGS2BOTS1vsS1->SetLogz();
		T1	->Draw("TMath::Log10(S2botPE/S1totalPE):S1totalPE>>h2_LOGS2BOTS1vsS1",	cut_PlotAll,	"COLZ");
		//h2_LOGS2S1vsS1	-> Scale(ScalingFactor);
		h2_LOGS2BOTS1vsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_LOGS2BOTS1vsS1	-> GetYaxis() -> SetTitle("log_{10}(S2_{bot}/S1)");
		h2_LOGS2BOTS1vsS1	-> GetXaxis() -> CenterTitle(true);
		h2_LOGS2BOTS1vsS1	-> GetYaxis() -> CenterTitle(true);
	c_LOGS2BOTS1vsS1->Update();	

	TCanvas *c_LOGS2S1vsS1SUM = new TCanvas("c_LOGS2S1vsS1SUM", "c_LOGS2S1vsS1SUM", 0, 0, 700, 500);
			 c_LOGS2S1vsS1SUM->SetFillColor(10);
    		 c_LOGS2S1vsS1SUM->SetLogz();
		T1	->Draw("TMath::Log10(S2totalPE/(S1totalPE+S1totalPE1)):(S1totalPE+S1totalPE1)>>h2_LOGS2S1vsS1SUM",	cut_PlotAll,	"COLZ");
		//h2_LOGS2S1vsS1SUM	-> Scale(ScalingFactor);
		h2_LOGS2S1vsS1SUM	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_LOGS2S1vsS1SUM	-> GetYaxis() -> SetTitle("log_{10}(S2_{tot}/S1_{sum})");
		h2_LOGS2S1vsS1SUM	-> GetXaxis() -> CenterTitle(true);
		h2_LOGS2S1vsS1SUM	-> GetYaxis() -> CenterTitle(true);
	c_LOGS2S1vsS1SUM->Update();	

	TCanvas *c_S1ASYMvsS1 = new TCanvas("c_S1ASYMvsS1", "c_S1ASYMvsS1", 0, 0, 700, 500);
			 c_S1ASYMvsS1->SetFillColor(10);
    		 c_S1ASYMvsS1->SetLogz();
		T1	->Draw("S1asym:S1totalPE>>h2_S1ASYMvsS1",	cut_PlotAll,	"COLZ");
		//h2_S1ASYMvsS1	-> Scale(ScalingFactor);
		h2_S1ASYMvsS1	-> GetXaxis() -> SetTitle("total S1 [PE]");
		h2_S1ASYMvsS1	-> GetYaxis() -> SetTitle("S1 asymmetry");
		h2_S1ASYMvsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S1ASYMvsS1	-> GetYaxis() -> CenterTitle(true);
	c_S1ASYMvsS1->Update();

	TCanvas *c_S1ASYM1vsS1 = new TCanvas("c_S1ASYM1vsS1", "c_S1ASYM1vsS1", 0, 0, 700, 500);
			 c_S1ASYM1vsS1->SetFillColor(10);
    		 c_S1ASYM1vsS1->SetLogz();
		T1	->Draw("S1asym1:S1totalPE1>>h2_S1ASYM1vsS1",	cut_PlotAll,	"COLZ");
		//h2_S1ASYM1vsS1	-> Scale(ScalingFactor);
		h2_S1ASYM1vsS1	-> GetXaxis() -> SetTitle("total S1[1] [PE]");
		h2_S1ASYM1vsS1	-> GetYaxis() -> SetTitle("S1 asymmetry");
		h2_S1ASYM1vsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S1ASYM1vsS1	-> GetYaxis() -> CenterTitle(true);
	c_S1ASYM1vsS1->Update();

	TCanvas *c_S1ASYMvsDT = new TCanvas("c_S1ASYMvsDT", "c_S1ASYMvsDT", 0, 0, 700, 500);
			 c_S1ASYMvsDT->SetFillColor(10);
    		 c_S1ASYMvsDT->SetLogz();
		T1	->Draw("S1asym:dt_bot>>h2_S1ASYMvsDT",	cut_PlotAll,	"COLZ");
		//h2_S1ASYMvsDT	-> Scale(ScalingFactor);
		h2_S1ASYMvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S1ASYMvsDT	-> GetYaxis() -> SetTitle("S1 asymmetry");
		h2_S1ASYMvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S1ASYMvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S1ASYMvsDT->Update();

	TCanvas *c_S2ASYMvsS2 = new TCanvas("c_S2SYMvsS2", "c_S2ASYMvsS2", 0, 0, 700, 500);
			 c_S2ASYMvsS2->SetFillColor(10);
    		 c_S2ASYMvsS2->SetLogz();
		T1	->Draw("S2asym:S2totalPE>>h2_S2ASYMvsS2",	cut_PlotAll,	"COLZ");
		//h2_S2ASYMvsS2	-> Scale(ScalingFactor);
		h2_S2ASYMvsS2	-> GetXaxis() -> SetTitle("S2 total [PE]");
		h2_S2ASYMvsS2	-> GetYaxis() -> SetTitle("S2 asymmetry");
		h2_S2ASYMvsS2	-> GetXaxis() -> CenterTitle(true);
		h2_S2ASYMvsS2	-> GetYaxis() -> CenterTitle(true);
	c_S2ASYMvsS2->Update();

	TCanvas *c_S2ASYMvsS2TOP = new TCanvas("c_S2SYMvsS2TOP", "c_S2ASYMvsS2TOP", 0, 0, 700, 500);
			 c_S2ASYMvsS2TOP->SetFillColor(10);
    		 c_S2ASYMvsS2TOP->SetLogz();
		T1	->Draw("S2asym:S2topPE>>h2_S2ASYMvsS2TOP",	cut_PlotAll,	"COLZ");
		//h2_S2ASYMvsS2TOP	-> Scale(ScalingFactor);
		h2_S2ASYMvsS2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h2_S2ASYMvsS2TOP	-> GetYaxis() -> SetTitle("S2 asymmetry");
		h2_S2ASYMvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2ASYMvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2ASYMvsS2TOP->Update();

	TCanvas *c_S2ASYMvsS1ASYM = new TCanvas("c_S2SYMvsS1ASYM", "c_S2ASYMvsS1ASYM", 0, 0, 700, 500);
			 c_S2ASYMvsS1ASYM->SetFillColor(10);
    		 c_S2ASYMvsS1ASYM->SetLogz();
		T1	->Draw("S2asym:S1asym>>h2_S2ASYMvsS1ASYM",	cut_PlotAll,	"COLZ");
		//h2_S2ASYMvsS1ASYM	-> Scale(ScalingFactor);
		h2_S2ASYMvsS1ASYM	-> GetXaxis() -> SetTitle("S1 asymmetry");
		h2_S2ASYMvsS1ASYM	-> GetYaxis() -> SetTitle("S2 asymmetry");
		h2_S2ASYMvsS1ASYM	-> GetXaxis() -> CenterTitle(true);
		h2_S2ASYMvsS1ASYM	-> GetYaxis() -> CenterTitle(true);
	c_S2ASYMvsS1ASYM->Update();
	
	TCanvas *c_S1vsS1 = new TCanvas("c_S1vsS1", "c_S1vsS1", 0, 0, 700, 500);
			 c_S1vsS1->SetFillColor(10);
    		 c_S1vsS1->SetLogz();
		T1	->Draw("S1totalPE1:S1totalPE>>h2_S1vsS1", cut_PlotAll,	"COLZ");
		h2_S1vsS1	-> GetXaxis() -> SetTitle("largest S1[0] [PE]");
		h2_S1vsS1	-> GetYaxis() -> SetTitle("S1[1] [PE]");
		h2_S1vsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S1vsS1	-> GetYaxis() -> CenterTitle(true);
	c_S1vsS1->Update();

	TCanvas *c_S1vsS1_scat = new TCanvas("c_S1vsS1_scat", "c_S1vsS1_scat", 0, 0, 700, 500);
			 c_S1vsS1_scat->SetFillColor(10);
    		 //c_S1vsS1_scat->SetLogz();
		T1	->Draw("S1totalPE1:S1totalPE>>h2_S1vsS1_scat", cut_PlotAll,	"");
		h2_S1vsS1_scat	-> GetXaxis() -> SetTitle("largest S1[0] [PE]");
		h2_S1vsS1_scat	-> GetYaxis() -> SetTitle("S1[1] [PE]");
		h2_S1vsS1_scat	-> GetXaxis() -> CenterTitle(true);
		h2_S1vsS1_scat	-> GetYaxis() -> CenterTitle(true);
	c_S1vsS1_scat->Update();

	TCanvas *c_S1TOPvsS1TOP = new TCanvas("c_S1TOPvsS1TOP", "c_S1TOPvsS1TOP", 0, 0, 700, 500);
			 c_S1TOPvsS1TOP->SetFillColor(10);
    		 c_S1TOPvsS1TOP->SetLogz();
		T1	->Draw("S1topPE1:S1topPE>>h2_S1TOPvsS1TOP", cut_PlotAll,	"COLZ");
		h2_S1TOPvsS1TOP	-> GetXaxis() -> SetTitle("largest S1 top [0] [PE]");
		h2_S1TOPvsS1TOP	-> GetYaxis() -> SetTitle("S1 top [1] [PE]");
		h2_S1TOPvsS1TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S1TOPvsS1TOP	-> GetYaxis() -> CenterTitle(true);
	c_S1TOPvsS1TOP->Update();

	TCanvas *c_S1TOPvsS1TOP_scat = new TCanvas("c_S1BOTvsS1TOP_scat", "c_S1TOPvsS1TOP_scat", 0, 0, 700, 500);
			 c_S1TOPvsS1TOP_scat->SetFillColor(10);
    		 //c_S1TOPvsS1TOP_scat->SetLogz();
		T1	->Draw("S1botPE1:S1botPE>>h2_S1BOTvsS1BOT_scat", cut_PlotAll,	"");
		h2_S1TOPvsS1TOP_scat	-> GetXaxis() -> SetTitle("largest S1 top [0] [PE]");
		h2_S1TOPvsS1TOP_scat	-> GetYaxis() -> SetTitle("S1 top [1] [PE]");
		h2_S1TOPvsS1TOP_scat	-> GetXaxis() -> CenterTitle(true);
		h2_S1TOPvsS1TOP_scat	-> GetYaxis() -> CenterTitle(true);
	c_S1TOPvsS1TOP_scat->Update();

	TCanvas *c_S1BOTvsS1BOT = new TCanvas("c_S1BOTvsS1BOT", "c_S1BOTvsS1BOT", 0, 0, 700, 500);
			 c_S1BOTvsS1BOT->SetFillColor(10);
    		 c_S1BOTvsS1BOT->SetLogz();
		T1	->Draw("S1botPE1:S1botPE>>h2_S1BOTvsS1BOT", cut_PlotAll,	"COLZ");
		h2_S1BOTvsS1BOT	-> GetXaxis() -> SetTitle("largest S1 bottom [0] [PE]");
		h2_S1BOTvsS1BOT	-> GetYaxis() -> SetTitle("S1 bottom [1] [PE]");
		h2_S1BOTvsS1BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S1BOTvsS1BOT	-> GetYaxis() -> CenterTitle(true);
	c_S1BOTvsS1BOT->Update();

	TCanvas *c_S1BOTvsS1BOT_scat = new TCanvas("c_S1BOTvsS1BOT_scat", "c_S1BOTvsS1BOT_scat", 0, 0, 700, 500);
			 c_S1BOTvsS1BOT_scat->SetFillColor(10);
    		 //c_S1BOTvsS1BOT_scat->SetLogz();
		T1	->Draw("S1botPE1:S1botPE>>h2_S1BOTvsS1BOT_scat", cut_PlotAll,	"");
		h2_S1BOTvsS1BOT_scat	-> GetXaxis() -> SetTitle("largest S1 bottom [0] [PE]");
		h2_S1BOTvsS1BOT_scat	-> GetYaxis() -> SetTitle("S1 bottom [1] [PE]");
		h2_S1BOTvsS1BOT_scat	-> GetXaxis() -> CenterTitle(true);
		h2_S1BOTvsS1BOT_scat	-> GetYaxis() -> CenterTitle(true);
	c_S1BOTvsS1BOT_scat->Update();
	
	TCanvas *c_S2vsS2 = new TCanvas("c_S2vsS2", "c_S2vsS2", 0, 0, 700, 500);
			 c_S2vsS2->SetFillColor(10);
    		 c_S2vsS2->SetLogz();
		T1	->Draw("S2totalPE1:S2totalPE>>h2_S2vsS2", cut_PlotAll,	"COLZ");
		h2_S2vsS2	-> GetXaxis() -> SetTitle("largest S2tot[0] [PE]");
		h2_S2vsS2	-> GetYaxis() -> SetTitle("S2tot[1] [PE]");
		h2_S2vsS2	-> GetXaxis() -> CenterTitle(true);
		h2_S2vsS2	-> GetYaxis() -> CenterTitle(true);
	c_S2vsS2->Update();

	TCanvas *c_S2TOPvsS2TOP = new TCanvas("c_S2TOPvsS2TOP", "c_S2TOPvsS2TOP", 0, 0, 700, 500);
			 c_S2TOPvsS2TOP->SetFillColor(10);
    		 c_S2TOPvsS2TOP->SetLogz();
		T1	->Draw("S2topPE1:S2topPE>>h2_S2TOPvsS2TOP", cut_PlotAll,	"COLZ");
		h2_S2TOPvsS2TOP	-> GetXaxis() -> SetTitle("largest S2top[0] [PE]");
		h2_S2TOPvsS2TOP	-> GetYaxis() -> SetTitle("S2top[1] [PE]");
		h2_S2TOPvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2TOPvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2TOPvsS2TOP->Update();

	TCanvas *c_S2BOTvsS2BOT = new TCanvas("c_S2BOTvsS2BOT", "c_S2BOTvsS2BOT", 0, 0, 700, 500);
			 c_S2BOTvsS2BOT->SetFillColor(10);
    		 c_S2BOTvsS2BOT->SetLogz();
		T1	->Draw("S2botPE1:S2topPE>>h2_S2BOTvsS2BOT", cut_PlotAll,	"COLZ");
		h2_S2BOTvsS2BOT	-> GetXaxis() -> SetTitle("largest S2bot[0] [PE]");
		h2_S2BOTvsS2BOT	-> GetYaxis() -> SetTitle("S2bot[1] [PE]");
		h2_S2BOTvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2BOTvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2BOTvsS2BOT->Update();

	TCanvas *c_DT = new TCanvas("c_DT", "c_DT", 0, 0, 700, 500);
			 c_DT->SetFillColor(10);
    		 c_DT->SetLogy();
		T1	->Draw("dt_bot>>h1_DT",	cut_PlotAll,	"");
		//h1_DT	-> Scale(ScalingFactor);
		h1_DT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h1_DT	-> GetYaxis() -> SetTitle("Counts");
		h1_DT	-> GetXaxis() -> CenterTitle(true);
		h1_DT	-> GetYaxis() -> CenterTitle(true);
	c_DT->Update();

	TCanvas *c_S1delay = new TCanvas("c_S1delay", "c_S1delay", 0, 0, 700, 500);
			 c_S1delay->SetFillColor(10);
    		 c_S1delay->SetLogy();
		T1	->Draw("S1time1_bot-S1time_bot>>h1_S1delayBot",	cut_PlotAll,	"");
		T1	->Draw("S1time1_top-S1time_top>>h1_S1delayTop",	cut_PlotAll,	"same");
		//h1_S1delay	-> Scale(ScalingFactor);
		h1_S1delayBot	-> GetXaxis() -> SetTitle("delay time between S1 pulses [#mus]");
		h1_S1delayBot	-> GetYaxis() -> SetTitle("Counts");
		h1_S1delayBot	-> GetXaxis() -> CenterTitle(true);
		h1_S1delayBot	-> GetYaxis() -> CenterTitle(true);
	c_S1delay->Update();

	TCanvas *c_S2delay = new TCanvas("c_S2delay", "c_S2delay", 0, 0, 700, 500);
			 c_S2delay->SetFillColor(10);
    		 c_S2delay->SetLogy();
		T1	->Draw("S2time1_bot-S2time_bot>>h1_S2delayBot",	cut_PlotAll,	"");
		T1	->Draw("S2time1_top-S2time_top>>h1_S2delayTop",	cut_PlotAll,	"same");
		//h1_S2delay	-> Scale(ScalingFactor);
		h1_S2delayBot	-> GetXaxis() -> SetTitle("delay time between S2 pulses [#mus]");
		h1_S2delayBot	-> GetYaxis() -> SetTitle("Counts");
		h1_S2delayBot	-> GetXaxis() -> CenterTitle(true);
		h1_S2delayBot	-> GetYaxis() -> CenterTitle(true);
	c_S2delay->Update();

	TCanvas *c_S2RATIOvsS2delay = new TCanvas("c_S2RATIOvsS2delay", "c_S2RATIOvsS2delay", 0, 0, 700, 500);
			 c_S2RATIOvsS2delay->SetFillColor(10);
    		 c_S2RATIOvsS2delay->SetLogy();
    		 c_S2RATIOvsS2delay->SetLogz();
		T1	->Draw("(S2topPE1/S2topPE):(S2time1_bot-S2time_bot)>>h2_S2RATIOvsS2delayTop",	cut_PlotAll,	"COLZ");
		//h1_S2delay	-> Scale(ScalingFactor);
		h2_S2RATIOvsS2delayTop	-> GetXaxis() -> SetTitle("delay time between S2 pulses [#mus]");
		h2_S2RATIOvsS2delayTop	-> GetYaxis() -> SetTitle("S2[1]/S2[0] ratio");
		h2_S2RATIOvsS2delayTop	-> GetZaxis() -> SetTitle("Counts");
		h2_S2RATIOvsS2delayTop	-> GetXaxis() -> CenterTitle(true);
		h2_S2RATIOvsS2delayTop	-> GetYaxis() -> CenterTitle(true);
		h2_S2RATIOvsS2delayTop	-> GetYaxis() -> CenterTitle(true);
	c_S2delay->Update();

	TCanvas *c_S2vsDT = new TCanvas("c_S2vsDT", "c_S2vsDT", 0, 0, 700, 500);
			 c_S2vsDT->SetFillColor(10);
    		 c_S2vsDT->SetLogz();
		T1	->Draw("S2totalPE:dt_bot>>h2_S2vsDT",	cut_PlotAll,	"COLZ");
		//h2_S2vsDT	-> Scale(ScalingFactor);
		h2_S2vsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2vsDT	-> GetYaxis() -> SetTitle("largest S2 [PE]");
		h2_S2vsDT	-> GetZaxis() -> SetTitle("Counts");
		h2_S2vsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2vsDT	-> GetYaxis() -> CenterTitle(true);
		h2_S2vsDT	-> GetZaxis() -> CenterTitle(true);
	c_S2vsDT->Update();

	TCanvas *c_S2TOPvsDT = new TCanvas("c_S2TOPvsDT", "c_S2TOPvsDT", 0, 0, 700, 500);
			 c_S2TOPvsDT->SetFillColor(10);
    		 c_S2TOPvsDT->SetLogz();
		T1	->Draw("S2topPE:dt_bot>>h2_S2TOPvsDT",	cut_PlotAll,	"COLZ");
		//h2_S2TOPvsDT	-> Scale(ScalingFactor);
		h2_S2TOPvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2TOPvsDT	-> GetYaxis() -> SetTitle("largest S2 top [PE]");
		h2_S2TOPvsDT	-> GetZaxis() -> SetTitle("Counts");
		h2_S2TOPvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2TOPvsDT	-> GetYaxis() -> CenterTitle(true);
		h2_S2TOPvsDT	-> GetZaxis() -> CenterTitle(true);
	c_S2TOPvsDT->Update();

	TCanvas *c_S2BOTvsDT = new TCanvas("c_S2BOTvsDT", "c_S2BOTvsDT", 0, 0, 700, 500);
			 c_S2BOTvsDT->SetFillColor(10);
    		 c_S2BOTvsDT->SetLogz();
		T1	->Draw("S2botPE:dt_bot>>h2_S2BOTvsDT",	cut_PlotAll,	"COLZ");
		//h2_S2BOTvsDT	-> Scale(ScalingFactor);
		h2_S2BOTvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2BOTvsDT	-> GetYaxis() -> SetTitle("largest S2 bottom [PE]");
		h2_S2BOTvsDT	-> GetZaxis() -> SetTitle("Counts");
		h2_S2BOTvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2BOTvsDT	-> GetYaxis() -> CenterTitle(true);
		h2_S2BOTvsDT	-> GetZaxis() -> CenterTitle(true);
	c_S2BOTvsDT->Update();

	TCanvas *c_S1vsDT = new TCanvas("c_S1vsDT", "c_S1vsDT", 0, 0, 700, 500);
			 c_S1vsDT->SetFillColor(10);
    		 c_S1vsDT->SetLogz();
		T1	->Draw("S1totalPE:dt_bot>>h2_S1vsDT",	cut_PlotAll,	"COLZ");
		//h2_S1vsDT	-> Scale(ScalingFactor);
		h2_S1vsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S1vsDT	-> GetYaxis() -> SetTitle("largest S1[PE]");
		h2_S1vsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S1vsDT	-> GetYaxis() -> CenterTitle(true);
	c_S1vsDT->Update();

	TCanvas *c_S1TOPvsDT = new TCanvas("c_S1TOPvsDT", "c_S1TOPvsDT", 0, 0, 700, 500);
			 c_S1TOPvsDT->SetFillColor(10);
    		 c_S1TOPvsDT->SetLogz();
		T1	->Draw("S1topPE:dt_bot>>h2_S1TOPvsDT",	cut_PlotAll,	"COLZ");
		//h2_S1vsDT	-> Scale(ScalingFactor);
		h2_S1TOPvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S1TOPvsDT	-> GetYaxis() -> SetTitle("largest S1 top [PE]");
		h2_S1TOPvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S1TOPvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S1TOPvsDT->Update();

	TCanvas *c_S1BOTvsDT = new TCanvas("c_S1BOTvsDT", "c_S1BOTvsDT", 0, 0, 700, 500);
			 c_S1BOTvsDT->SetFillColor(10);
    		 c_S1BOTvsDT->SetLogz();
		T1	->Draw("S1botPE:dt_bot>>h2_S1BOTvsDT",	cut_PlotAll,	"COLZ");
		//h2_S1vsDT	-> Scale(ScalingFactor);
		h2_S1BOTvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S1BOTvsDT	-> GetYaxis() -> SetTitle("largest S1 bottom [PE]");
		h2_S1BOTvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S1BOTvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S1BOTvsDT->Update();

	TCanvas *c_S1vsDT_toFit = new TCanvas("c_S1vsDT_toFit", "c_S1vsDT_toFit", 0, 0, 700, 500);
			 c_S1vsDT_toFit->SetFillColor(10);
    		 c_S1vsDT_toFit->SetLogz();
		T1	->Draw("S1totalPE:dt_bot>>h2_S1vsDT_toFit",	cut_PlotAll,	"COLZ");
		//h2_S1vsDT	-> Scale(ScalingFactor);
		h2_S1vsDT_toFit	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S1vsDT_toFit	-> GetYaxis() -> SetTitle("largest S1 [PE]");
		h2_S1vsDT_toFit	-> GetXaxis() -> CenterTitle(true);
		h2_S1vsDT_toFit	-> GetYaxis() -> CenterTitle(true);
	c_S1vsDT_toFit->Update();

	TCanvas *c_cS1vsDT = new TCanvas("c_cS1vsDT", "c_cS1vsDT", 0, 0, 700, 500);
			 c_cS1vsDT->SetFillColor(10);
    		 c_cS1vsDT->SetLogz();
		T1	->Draw("cS1totalPE:dt_bot>>h2_cS1vsDT",	cut_PlotAll,	"COLZ");
		//h2_S1vsDT	-> Scale(ScalingFactor);
		h2_cS1vsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_cS1vsDT	-> GetYaxis() -> SetTitle("largest S1, dt-corrected [PE]");
		h2_cS1vsDT	-> GetXaxis() -> CenterTitle(true);
		h2_cS1vsDT	-> GetYaxis() -> CenterTitle(true);
	c_cS1vsDT->Update();

	TCanvas *c_S2ASYMvsS1 = new TCanvas("c_S2ASYMvsS1", "c_S2ASYMvsS1", 0, 0, 700, 500);
			 c_S2ASYMvsS1->SetFillColor(10);
    		 c_S2ASYMvsS1->SetLogz();
		T1	->Draw("S2asym:S2totalPE>>h2_S2ASYMvsS1",	cut_PlotAll,	"COLZ");
		//h2_S2ASYMvsS1	-> Scale(ScalingFactor);
		h2_S2ASYMvsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_S2ASYMvsS1	-> GetYaxis() -> SetTitle("S2 asymmetry");
		h2_S2ASYMvsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S2ASYMvsS1	-> GetYaxis() -> CenterTitle(true);
	c_S2ASYMvsS1->Update();

	TCanvas *c_S2WIDTHTOPvsDT = new TCanvas("c_S2WIDTHTOPvsDT", "c_S2WIDTHTOPvsDT", 0, 0, 700, 500);
			 c_S2WIDTHTOPvsDT->SetFillColor(10);
    		 c_S2WIDTHTOPvsDT->SetLogz();
		T1	->Draw("S2width_top:dt_bot>>h2_S2WIDTHTOPvsDT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHTOPvsDT	-> Scale(ScalingFactor);
		h2_S2WIDTHTOPvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2WIDTHTOPvsDT	-> GetYaxis() -> SetTitle("S2_{top} width at 50% height [#mus]");
		h2_S2WIDTHTOPvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHTOPvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHTOPvsDT->Update();

	TCanvas *c_S2WIDTHBOTvsDT = new TCanvas("c_S2WIDTHBOTvsDT", "c_S2WIDTHBOTvsDT", 0, 0, 700, 500);
			 c_S2WIDTHBOTvsDT->SetFillColor(10);
    		 c_S2WIDTHBOTvsDT->SetLogz();
		T1	->Draw("S2width_bot:dt_bot>>h2_S2WIDTHBOTvsDT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHBOTvsDT	-> Scale(ScalingFactor);
		h2_S2WIDTHBOTvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2WIDTHBOTvsDT	-> GetYaxis() -> SetTitle("S2_{bot} width at 50% height [#mus]");
		h2_S2WIDTHBOTvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHBOTvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHBOTvsDT->Update();

	TCanvas *c_S2WIDTHLOWTOPvsDT = new TCanvas("c_S2WIDTHLOWTOPvsDT", "c_S2WIDTHLOWTOPvsDT", 0, 0, 700, 500);
			 c_S2WIDTHLOWTOPvsDT->SetFillColor(10);
    		 c_S2WIDTHLOWTOPvsDT->SetLogz();
		T1	->Draw("S2widthLow_top:dt_bot>>h2_S2WIDTHLOWTOPvsDT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWTOPvsDT		-> Scale(ScalingFactor);
		h2_S2WIDTHLOWTOPvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2WIDTHLOWTOPvsDT	-> GetYaxis() -> SetTitle("S2_{top} width at 10% height [#mus]");
		h2_S2WIDTHLOWTOPvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWTOPvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWTOPvsDT->Update();

	TCanvas *c_S2WIDTHLOWBOTvsDT = new TCanvas("c_S2WIDTHLOWBOTvsDT", "c_S2WIDTHLOWBOTvsDT", 0, 0, 700, 500);
			 c_S2WIDTHLOWBOTvsDT->SetFillColor(10);
    		 c_S2WIDTHLOWBOTvsDT->SetLogz();
		T1	->Draw("S2widthLow_bot:dt_bot>>h2_S2WIDTHLOWBOTvsDT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHBOTvsDT		-> Scale(ScalingFactor);
		h2_S2WIDTHLOWBOTvsDT	-> GetXaxis() -> SetTitle("drift time [#mus]");
		h2_S2WIDTHLOWBOTvsDT	-> GetYaxis() -> SetTitle("S2_{bot} width at 10% height [#mus]");
		h2_S2WIDTHLOWBOTvsDT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWBOTvsDT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWBOTvsDT->Update();

	TCanvas *c_S2WIDTHTOPvsS2TOP = new TCanvas("c_S2WIDTHTOPvsS2TOP", "c_S2WIDTHTOPvsS2TOP", 0, 0, 700, 500);
			 c_S2WIDTHTOPvsS2TOP->SetFillColor(10);
    		 c_S2WIDTHTOPvsS2TOP->SetLogz();
		T1	->Draw("S2width_top:S2topPE>>h2_S2WIDTHTOPvsS2TOP", cut_PlotAll, "COLZ");
		//h2_S2WIDTHTOPvsS2TOP	-> Scale(ScalingFactor);
		h2_S2WIDTHTOPvsS2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h2_S2WIDTHTOPvsS2TOP	-> GetYaxis() -> SetTitle("S2_{top} width at 50% height [#mus]");
		h2_S2WIDTHTOPvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHTOPvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHTOPvsS2TOP->Update();

	TCanvas *c_S2WIDTHBOTvsS2BOT = new TCanvas("c_S2WIDTHBOTvsS2BOT", "c_S2WIDTHBOTvsS2BOT", 0, 0, 700, 500);
			 c_S2WIDTHBOTvsS2BOT->SetFillColor(10);
    		 c_S2WIDTHBOTvsS2BOT->SetLogz();
		T1	->Draw("S2width_bot:S2botPE>>h2_S2WIDTHBOTvsS2BOT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHBOTvsS2BOT	-> Scale(ScalingFactor);
		h2_S2WIDTHBOTvsS2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2WIDTHBOTvsS2BOT	-> GetYaxis() -> SetTitle("S2_{bot} width at 50% height [#mus]");
		h2_S2WIDTHBOTvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHBOTvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHBOTvsS2BOT->Update();

	TCanvas *c_S2WIDTHLOWTOPvsS2TOP = new TCanvas("c_S2WIDTHLOWTOPvsS2TOP", "c_S2WIDTHLOWTOPvsS2TOP", 0, 0, 700, 500);
			 c_S2WIDTHLOWTOPvsS2TOP->SetFillColor(10);
    		 c_S2WIDTHLOWTOPvsS2TOP->SetLogz();
		T1	->Draw("S2widthLow_top:S2topPE>>h2_S2WIDTHLOWTOPvsS2TOP", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWTOPvsS2TOP	-> Scale(ScalingFactor);
		h2_S2WIDTHLOWTOPvsS2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h2_S2WIDTHLOWTOPvsS2TOP	-> GetYaxis() -> SetTitle("S2_{top} width at 10% height [#mus]");
		h2_S2WIDTHLOWTOPvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWTOPvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWTOPvsS2TOP->Update();

	TCanvas *c_S2WIDTHLOWBOTvsS2BOT = new TCanvas("c_S2WIDTHLOWBOTvsS2BOT", "c_S2WIDTHLOWBOTvsS2BOT", 0, 0, 700, 500);
			 c_S2WIDTHLOWBOTvsS2BOT->SetFillColor(10);
    		 c_S2WIDTHLOWBOTvsS2BOT->SetLogz();
		T1	->Draw("S2widthLow_top:S2botPE>>h2_S2WIDTHLOWBOTvsS2BOT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWBOTvsS2BOT	-> Scale(ScalingFactor);
		h2_S2WIDTHLOWBOTvsS2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2WIDTHLOWBOTvsS2BOT	-> GetYaxis() -> SetTitle("S2_{bot} width at 10% height [#mus]");
		h2_S2WIDTHLOWBOTvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWBOTvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWBOTvsS2BOT->Update();

	TCanvas *c_S2WIDTHoverHEIGHTTOPvsS2TOP = new TCanvas("c_S2WIDTHoverHEIGHTTOPvsS2TOP", "c_S2WIDTHoverHEIGHTTOPvsS2TOP", 0, 0, 700, 500);
			 c_S2WIDTHoverHEIGHTTOPvsS2TOP->SetFillColor(10);
    		 //c_S2WIDTHoverHEIGHTTOPvsS2TOP->SetLogx();
    		 c_S2WIDTHoverHEIGHTTOPvsS2TOP->SetLogy();
    		 c_S2WIDTHoverHEIGHTTOPvsS2TOP->SetLogz();
		//T1	->Draw("S2width_top/S2height_top:S2topPE>>h2_S2WIDTHoverHEIGHTTOPvsS2TOP", cut_PlotAll, "COLZ");
		T1	->Draw("S2width_top/S2widthLow_top*S2height_top:S2topPE>>h2_S2WIDTHoverHEIGHTTOPvsS2TOP", cut_PlotAll, "COLZ");
		//h2_S2WIDTHoverHEIGHTTOPvsS2TOP	-> Scale(ScalingFactor);
		h2_S2WIDTHoverHEIGHTTOPvsS2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h2_S2WIDTHoverHEIGHTTOPvsS2TOP	-> GetYaxis() -> SetTitle("S2_{top} width at 50% height / S2_{top} height");
		h2_S2WIDTHoverHEIGHTTOPvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHoverHEIGHTTOPvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHoverHEIGHTTOPvsS2TOP->Update();

	TCanvas *c_S2WIDTHoverHEIGHTBOTvsS2BOT = new TCanvas("c_S2WIDTHoverHEIGHTvsS2BOT", "c_S2WIDTHoverHEIGHTvsS2BOT", 0, 0, 700, 500);
			 c_S2WIDTHoverHEIGHTBOTvsS2BOT->SetFillColor(10);
    		 //c_S2WIDTHoverHEIGHTBOTvsS2BOT->SetLogx();
    		 //c_S2WIDTHoverHEIGHTBOTvsS2BOT->SetLogy();
    		 c_S2WIDTHoverHEIGHTBOTvsS2BOT->SetLogz();
		T1	->Draw("S2width_bot/S2height_bot:S2botPE>>h2_S2WIDTHoverHEIGHTBOTvsS2BOT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHoverHEIGHTBOTvsS2BOT	-> Scale(ScalingFactor);
		h2_S2WIDTHoverHEIGHTBOTvsS2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2WIDTHoverHEIGHTBOTvsS2BOT	-> GetYaxis() -> SetTitle("S2_{bot} width at 50% height / S2_{bot} height");
		h2_S2WIDTHoverHEIGHTBOTvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHoverHEIGHTBOTvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHoverHEIGHTBOTvsS2BOT->Update();

	TCanvas *c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP = new TCanvas("c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP", "c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP", 0, 0, 700, 500);
			 c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP->SetFillColor(10);
    		 c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP->SetLogx();
    		 c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP->SetLogy();
    		 c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP->SetLogz();
		T1	->Draw("S2widthLow_top/S2height_top:S2topPE>>h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	-> Scale(ScalingFactor);
		h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	-> GetYaxis() -> SetTitle("S2_{top} width at 10% height / S2_{top} height");
		h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP->Update();

	TCanvas *c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT = new TCanvas("c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT", "c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT", 0, 0, 700, 500);
			 c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT->SetFillColor(10);
    		 c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT->SetLogx();
    		 //c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT->SetLogy();
    		 c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT->SetLogz();
		T1	->Draw("S2widthLow_bot/S2height_bot:S2botPE>>h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWoverHEIGHTBOTvsS2	-> Scale(ScalingFactor);
		h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT	-> GetYaxis() -> SetTitle("S2_{bot} width at 10% height / S2_{bot} height");
		h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWoverHEIGHTBOTvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT->Update();

	TCanvas *c_S2HEIGHTTOPvsS2TOP = new TCanvas("c_S2HEIGHTTOPvsS2TOP", "c_S2HEIGHTTOPvsS2TOP", 0, 0, 700, 500);
			 c_S2HEIGHTTOPvsS2TOP->SetFillColor(10);
    		 c_S2HEIGHTTOPvsS2TOP->SetLogz();
		T1	->Draw("S2height_top:S2topPE>>h2_S2HEIGHTTOPvsS2TOP", cut_PlotAll, "COLZ");
		//h2_S2HEIGHTTOPvsS2TOP	-> Scale(ScalingFactor);
		h2_S2HEIGHTTOPvsS2TOP	-> GetXaxis() -> SetTitle("S2 top [PE]");
		h2_S2HEIGHTTOPvsS2TOP	-> GetYaxis() -> SetTitle("S2_{top} height [samples]");
		h2_S2HEIGHTTOPvsS2TOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2HEIGHTTOPvsS2TOP	-> GetYaxis() -> CenterTitle(true);
	c_S2HEIGHTTOPvsS2TOP->Update();

	TCanvas *c_S2HEIGHTBOTvsS2BOT = new TCanvas("c_S2HEIGHTBOTvsS2BOT", "c_S2HEIGHTBOTvsS2BOT", 0, 0, 700, 500);
			 c_S2HEIGHTBOTvsS2BOT->SetFillColor(10);
    		 c_S2HEIGHTBOTvsS2BOT->SetLogz();
		T1	->Draw("S2height_bot:S2botPE>>h2_S2HEIGHTBOTvsS2BOT", cut_PlotAll, "COLZ");
		//h2_S2HEIGHTBOTvsS2BOT	-> Scale(ScalingFactor);
		h2_S2HEIGHTBOTvsS2BOT	-> GetXaxis() -> SetTitle("S2 bottom [PE]");
		h2_S2HEIGHTBOTvsS2BOT	-> GetYaxis() -> SetTitle("S2_{bot} height [samples]");
		h2_S2HEIGHTBOTvsS2BOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2HEIGHTBOTvsS2BOT	-> GetYaxis() -> CenterTitle(true);
	c_S2HEIGHTBOTvsS2BOT->Update();

	TCanvas *c_S2WIDTHvsHEIGHTTOP = new TCanvas("c_S2WIDTHvsHEIGHTTOP", "c_S2WIDTHvsHEIGHTTOP", 0, 0, 700, 500);
			 c_S2WIDTHvsHEIGHTTOP->SetFillColor(10);
    		 c_S2WIDTHvsHEIGHTTOP->SetLogz();
		T1	->Draw("S2width_top:S2height_top>>h2_S2WIDTHvsHEIGHTTOP", cut_PlotAll, "COLZ");
		//h2_S2WIDTHvsHEIGHTTOP	-> Scale(ScalingFactor);
		h2_S2WIDTHvsHEIGHTTOP	-> GetXaxis() -> SetTitle("S2_{top} height [samples]");
		h2_S2WIDTHvsHEIGHTTOP	-> GetYaxis() -> SetTitle("S2_{top} width at 50% height [#mus]");
		h2_S2WIDTHvsHEIGHTTOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHvsHEIGHTTOP	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHvsHEIGHTTOP->Update();

	TCanvas *c_S2WIDTHvsHEIGHTBOT = new TCanvas("c_S2WIDTHvsHEIGHTBOT", "c_S2WIDTHvsHEIGHTBOT", 0, 0, 700, 500);
			 c_S2WIDTHvsHEIGHTBOT->SetFillColor(10);
    		 c_S2WIDTHvsHEIGHTBOT->SetLogz();
		T1	->Draw("S2width_bot:S2height_bot>>h2_S2WIDTHvsHEIGHTBOT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHvsHEIGHTBOT	-> Scale(ScalingFactor);
		h2_S2WIDTHvsHEIGHTBOT	-> GetXaxis() -> SetTitle("S2_{bot} height [samples]");
		h2_S2WIDTHvsHEIGHTBOT	-> GetYaxis() -> SetTitle("S2_{bot} width at 50% height [#mus]");
		h2_S2WIDTHvsHEIGHTBOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHvsHEIGHTBOT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHvsHEIGHTBOT->Update();

	TCanvas *c_S2WIDTHLOWvsHEIGHTTOP = new TCanvas("c_S2WIDTHLOWvsHEIGHTTOP", "c_S2WIDTHLOWvsHEIGHTTOP", 0, 0, 700, 500);
			 c_S2WIDTHLOWvsHEIGHTTOP->SetFillColor(10);
    		 c_S2WIDTHLOWvsHEIGHTTOP->SetLogz();
		T1	->Draw("S2widthLow_top:S2height_top>>h2_S2WIDTHLOWvsHEIGHTTOP", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWvsHEIGHTTOP	-> Scale(ScalingFactor);
		h2_S2WIDTHLOWvsHEIGHTTOP	-> GetXaxis() -> SetTitle("S2_{top} height [samples]");
		h2_S2WIDTHLOWvsHEIGHTTOP	-> GetYaxis() -> SetTitle("S2_{top} width at 10% height [#mus]");
		h2_S2WIDTHLOWvsHEIGHTTOP	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWvsHEIGHTTOP	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWvsHEIGHTTOP->Update();

	TCanvas *c_S2WIDTHLOWvsHEIGHTBOT = new TCanvas("c_S2WIDTHLOWvsHEIGHTBOT", "c_S2WIDTHLOWvsHEIGHTBOT", 0, 0, 700, 500);
			 c_S2WIDTHLOWvsHEIGHTBOT->SetFillColor(10);
    		 c_S2WIDTHLOWvsHEIGHTBOT->SetLogz();
		T1	->Draw("S2widthLow_bot:S2height_bot>>h2_S2WIDTHLOWvsHEIGHTBOT", cut_PlotAll, "COLZ");
		//h2_S2WIDTHLOWvsHEIGHTBOT	-> Scale(ScalingFactor);
		h2_S2WIDTHLOWvsHEIGHTBOT	-> GetXaxis() -> SetTitle("S2_{bot} height [samples]");
		h2_S2WIDTHLOWvsHEIGHTBOT	-> GetYaxis() -> SetTitle("S2_{bot} width at 10% height [#mus]");
		h2_S2WIDTHLOWvsHEIGHTBOT	-> GetXaxis() -> CenterTitle(true);
		h2_S2WIDTHLOWvsHEIGHTBOT	-> GetYaxis() -> CenterTitle(true);
	c_S2WIDTHLOWvsHEIGHTBOT->Update();


	TCanvas *c_S1WIDTHvsS1 = new TCanvas("c_S1WIDTHvsS1", "c_S1WIDTHvsS1", 0, 0, 700, 500);
			 c_S1WIDTHvsS1->SetFillColor(10);
    		 c_S1WIDTHvsS1->SetLogz();
		T1	->Draw("S1width_bot:S1totalPE>>h2_S1WIDTHvsS1", cut_PlotAll, "COLZ");
		//h2_S1WIDTHvsS1	-> Scale(ScalingFactor);
		h2_S1WIDTHvsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_S1WIDTHvsS1	-> GetYaxis() -> SetTitle("S1 width at 50% height [ns]");
		h2_S1WIDTHvsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S1WIDTHvsS1	-> GetYaxis() -> CenterTitle(true);
	c_S1WIDTHvsS1->Update();

	TCanvas *c_S1WIDTHLOWvsS1 = new TCanvas("c_S1WIDTHLOWvsS1", "c_S1WIDTHLOWvsS1", 0, 0, 700, 500);
			 c_S1WIDTHLOWvsS1->SetFillColor(10);
    		 c_S1WIDTHLOWvsS1->SetLogz();
		T1	->Draw("S1widthLow_top:S1totalPE>>h2_S1WIDTHLOWvsS1", cut_PlotAll, "COLZ");
		//h2_S1WIDTHLOWvsS1	-> Scale(ScalingFactor);
		h2_S1WIDTHLOWvsS1	-> GetXaxis() -> SetTitle("S1 total [PE]");
		h2_S1WIDTHLOWvsS1	-> GetYaxis() -> SetTitle("S1 width at 10% height [ns]");
		h2_S1WIDTHLOWvsS1	-> GetXaxis() -> CenterTitle(true);
		h2_S1WIDTHLOWvsS1	-> GetYaxis() -> CenterTitle(true);
	c_S1WIDTHLOWvsS1->Update();

	TCanvas *c_S2DELAYvsS1DELAY = new TCanvas("c_S2DELAYvsS1DELAY", "c_S2DELAYvsS1DELAY", 0, 0, 700, 500);
			 c_S2DELAYvsS1DELAY->SetFillColor(10);
    		 c_S2DELAYvsS1DELAY->SetLogz();
		T1	->Draw("S2delay_bot:S1delay_bot>>h2_S2DELAYvsS1DELAY", cut_PlotAll, "COLZ");
		//h2_S2DELAYvsS1DELAY	-> Scale(ScalingFactor);
		h2_S2DELAYvsS1DELAY	-> GetXaxis() -> SetTitle("Delay between S1[0] and S1[1] [#mus]");
		h2_S2DELAYvsS1DELAY	-> GetYaxis() -> SetTitle("Delay between S2[0] and S2[1] [#mus]");
		h2_S2DELAYvsS1DELAY	-> GetXaxis() -> CenterTitle(true);
		h2_S2DELAYvsS1DELAY	-> GetYaxis() -> CenterTitle(true);
	c_S2DELAYvsS1DELAY->Update();




	// write number of events in the drift time plot
	c_DT->cd();
		TPaveStats *ptstats_DT = new TPaveStats(0.5114379,0.6432039,0.8986928,0.8956311,"brNDC");
					ptstats_DT->SetName("stats");
					ptstats_DT->SetBorderSize(0);
					ptstats_DT->SetTextAlign(12);
					ptstats_DT->SetFillStyle(0);
					ptstats_DT->SetFillColor(0);
			char text_DT_1[256];
			char text_DT_2[256];
  			sprintf(text_DT_1, "All events: %d", nEventsTotal);
  			sprintf(text_DT_2, "Events survived: %d (%1.2f %%)", nEventsSurvived, FractionSurvivedEvents);
			TText *
					text_DT = ptstats_DT->AddText(text_DT_1);
					text_DT = ptstats_DT->AddText(text_DT_2);
   			ptstats_DT->Draw();
	c_DT->Update();


	// fit a Gaussian to the width distribution
	c_S2WIDTHtop->cd();
/*		TF1 *fit_S2widthTop = new TF1("fit_S2widthTop","gaus",0.3,0.6);
			 fit_S2widthTop->SetLineColor(2);
			 fit_S2widthTop->SetLineWidth(2);
		h1_S2WIDTHtop->Fit(fit_S2widthTop,"R");
		double S2widthMean 			= fit_S2widthTop->GetParameter(1);
		double S2widthSigma			= fit_S2widthTop->GetParameter(2);		
		double S2widthMeanError 	= fit_S2widthTop->GetParError(1);
		double S2widthSigmaError	= fit_S2widthTop->GetParError(2);		
*/		double S2widthTopMedian 		= h1_S2WIDTHtop->GetMean(1);
		double S2widthTopRms			= h1_S2WIDTHtop->GetRMS(1);		
		double S2widthTopMedianError 	= h1_S2WIDTHtop->GetMeanError(1);
		double S2widthTopRmsError		= h1_S2WIDTHtop->GetRMSError(1);
		TPaveStats *ptstats_S2widthTop = new TPaveStats(0.5114379,0.6432039,0.8986928,0.8956311,"brNDC");
					ptstats_S2widthTop->SetName("stats");
					ptstats_S2widthTop->SetBorderSize(0);
					ptstats_S2widthTop->SetTextAlign(12);
					ptstats_S2widthTop->SetFillStyle(0);
					ptstats_S2widthTop->SetFillColor(0);
			char text_S2widthTop_1[256];
			char text_S2widthTop_2[256];
			char text_S2widthTop_3[256];
			char text_S2widthTop_4[256];
  			//sprintf(text_S2widthTop_1, "#mu = (%1.2f #pm %1.2f) #mus", S2widthMean, S2widthMeanError);
  			//sprintf(text_S2widthTop_2, "#sigma = (%1.2f #pm %1.2f) #mus", S2widthSigma, S2widthSigmaError);
  			sprintf(text_S2widthTop_3, "Median = (%1.2f #pm %1.2f) #mus", S2widthTopMedian, S2widthTopMedianError);
  			sprintf(text_S2widthTop_4, "RMS = (%1.2f #pm %1.2f) #mus", S2widthTopRms, S2widthTopRmsError);
			TText *
					text_S2widthTop = ptstats_S2widthTop->AddText(text_S2widthTop_3);
					text_S2widthTop = ptstats_S2widthTop->AddText(text_S2widthTop_4);
   			ptstats_S2widthTop->Draw();
	c_S2WIDTHtop->Update();

	c_S2WIDTHLOWtop->cd();
/*		TF1 *fit_S2widthLowTop = new TF1("fit_S2widthLowTop","gaus",0.5,1.1);
			 fit_S2widthLowTop->SetLineColor(2);
			 fit_S2widthLowTop->SetLineWidth(2);
		h1_S2WIDTHLOWtop->Fit(fit_S2widthTop,"R");
		double S2widthLowTopMean 		= fit_S2widthLowTop->GetParameter(1);
		double S2widthLowTopSigma		= fit_S2widthLowTop->GetParameter(2);		
		double S2widthLowTopMeanError 	= fit_S2widthLowTop->GetParError(1);
		double S2widthLowTopSigmaError	= fit_S2widthLowTop->GetParError(2);		
*/		double S2widthLowTopMedian 		= h1_S2WIDTHLOWtop->GetMean(1);
		double S2widthLowTopRms			= h1_S2WIDTHLOWtop->GetRMS(1);		
		double S2widthLowTopMedianError = h1_S2WIDTHLOWtop->GetMeanError(1);
		double S2widthLowTopRmsError	= h1_S2WIDTHLOWtop->GetRMSError(1);		
		TPaveStats *ptstats_S2widthLowTop = new TPaveStats(0.5114379,0.6432039,0.8986928,0.8956311,"brNDC");
					ptstats_S2widthLowTop->SetName("stats");
					ptstats_S2widthLowTop->SetBorderSize(0);
					ptstats_S2widthLowTop->SetTextAlign(12);
					ptstats_S2widthLowTop->SetFillStyle(0);
					ptstats_S2widthLowTop->SetFillColor(0);
			char text_S2widthLowTop_1[256];
			char text_S2widthLowTop_2[256];
			char text_S2widthLowTop_3[256];
			char text_S2widthLowTop_4[256];
  			//sprintf(text_S2widthLowTop_1, "#mu = (%1.2f #pm %1.2f) #mus", S2widthLowTopMean, S2widthLowTopMeanError);
  			//sprintf(text_S2widthLowTop_2, "#sigma = (%1.2f #pm %1.2f) #mus", S2widthLowTopSigma, S2widthLowTopSigmaError);
  			sprintf(text_S2widthLowTop_3, "Median = (%1.2f #pm %1.2f) #mus", S2widthLowTopMedian, S2widthLowTopMedianError);
  			sprintf(text_S2widthLowTop_4, "RMS = (%1.2f #pm %1.2f) #mus", S2widthLowTopRms, S2widthLowTopRmsError);
			TText *
					//text_S2widthLowTop = ptstats2->AddText(text2a);
					//text_S2widthLowTop = ptstats2->AddText(text2b);
					text_S2widthLowTop = ptstats_S2widthLowTop->AddText(text_S2widthLowTop_3);
					text_S2widthLowTop = ptstats_S2widthLowTop->AddText(text_S2widthLowTop_4);
   			ptstats_S2widthLowTop->Draw();
	c_S2WIDTHLOWtop->Update();

	// fit a Gaussian to the width distribution
	c_S2WIDTHbot->cd();
/*		TF1 *fit_S2widthBot = new TF1("fit_S2widthBot","gaus",0.3,0.6);
			 fit_S2widthBot->SetLineColor(2);
			 fit_S2widthBot->SetLineWidth(2);
		h1_S2WIDTHbot->Fit(fit_S2widthBot,"R");
		double S2widthMean 			= fit_S2widthBot->GetParameter(1);
		double S2widthSigma			= fit_S2widthBot->GetParameter(2);		
		double S2widthMeanError 	= fit_S2widthBot->GetParError(1);
		double S2widthSigmaError	= fit_S2widthBot->GetParError(2);		
*/		double S2widthBotMedian 		= h1_S2WIDTHbot->GetMean(1);
		double S2widthBotRms			= h1_S2WIDTHbot->GetRMS(1);		
		double S2widthBotMedianError 	= h1_S2WIDTHbot->GetMeanError(1);
		double S2widthBotRmsError		= h1_S2WIDTHbot->GetRMSError(1);		
		TPaveStats *ptstats_S2widthBot = new TPaveStats(0.5114379,0.6432039,0.8986928,0.8956311,"brNDC");
					ptstats_S2widthBot->SetName("stats");
					ptstats_S2widthBot->SetBorderSize(0);
					ptstats_S2widthBot->SetTextAlign(12);
					ptstats_S2widthBot->SetFillStyle(0);
					ptstats_S2widthBot->SetFillColor(0);
			char text_S2widthBot_1[256];
			char text_S2widthBot_2[256];
			char text_S2widthBot_3[256];
			char text_S2widthBot_4[256];
  			//sprintf(text_S2widthBot_1, "#mu = (%1.2f #pm %1.2f) #mus", S2widthMean, S2widthMeanError);
  			//sprintf(text_S2widthBot_2, "#sigma = (%1.2f #pm %1.2f) #mus", S2widthSigma, S2widthSigmaError);
  			sprintf(text_S2widthBot_3, "Median = (%1.2f #pm %1.2f) #mus", S2widthBotMedian, S2widthBotMedianError);
  			sprintf(text_S2widthBot_4, "RMS = (%1.2f #pm %1.2f) #mus", S2widthBotRms, S2widthBotRmsError);
			TText *
					text_S2widthBot = ptstats_S2widthBot->AddText(text_S2widthBot_3);
					text_S2widthBot = ptstats_S2widthBot->AddText(text_S2widthBot_4);
   			ptstats_S2widthBot->Draw();
	c_S2WIDTHbot->Update();

	c_S2WIDTHLOWbot->cd();
/*		TF1 *fit_S2widthLowBot = new TF1("fit_S2widthLowBot","gaus",0.5,1.1);
			 fit_S2widthLowBot->SetLineColor(2);
			 fit_S2widthLowBot->SetLineWidth(2);
		h1_S2WIDTHLOWbot->Fit(fit_S2widthBot,"R");
		double S2widthLowBotMean 		= fit_S2widthLowBot->GetParameter(1);
		double S2widthLowBotSigma		= fit_S2widthLowBot->GetParameter(2);		
		double S2widthLowBotMeanError 	= fit_S2widthLowBot->GetParError(1);
		double S2widthLowBotSigmaError	= fit_S2widthLowBot->GetParError(2);		
*/		double S2widthLowBotMedian 		= h1_S2WIDTHLOWbot->GetMean(1);
		double S2widthLowBotRms			= h1_S2WIDTHLOWbot->GetRMS(1);		
		double S2widthLowBotMedianError = h1_S2WIDTHLOWbot->GetMeanError(1);
		double S2widthLowBotRmsError	= h1_S2WIDTHLOWbot->GetRMSError(1);		
		TPaveStats *ptstats_S2widthLowBot = new TPaveStats(0.5114379,0.6432039,0.8986928,0.8956311,"brNDC");
					ptstats_S2widthLowBot->SetName("stats");
					ptstats_S2widthLowBot->SetBorderSize(0);
					ptstats_S2widthLowBot->SetTextAlign(12);
					ptstats_S2widthLowBot->SetFillStyle(0);
					ptstats_S2widthLowBot->SetFillColor(0);
			char text_S2widthLowBot_1[256];
			char text_S2widthLowBot_2[256];
			char text_S2widthLowBot_3[256];
			char text_S2widthLowBot_4[256];
  			//sprintf(text_S2widthLowBot_1, "#mu = (%1.2f #pm %1.2f) #mus", S2widthLowBotMean, S2widthLowBotMeanError);
  			//sprintf(text_S2widthLowBot_2, "#sigma = (%1.2f #pm %1.2f) #mus", S2widthLowBotSigma, S2widthLowBotSigmaError);
  			sprintf(text_S2widthLowBot_3, "Median = (%1.2f #pm %1.2f) #mus", S2widthLowBotMedian, S2widthLowBotMedianError);
  			sprintf(text_S2widthLowBot_4, "RMS = (%1.2f #pm %1.2f) #mus", S2widthLowBotRms, S2widthLowBotRmsError);
			TText *
					//text_S2widthLowBot = ptstats2->AddText(text2a);
					//text_S2widthLowBot = ptstats2->AddText(text2b);
					text_S2widthLowBot = ptstats_S2widthLowBot->AddText(text_S2widthLowBot_3);
					text_S2widthLowBot = ptstats_S2widthLowBot->AddText(text_S2widthLowBot_4);
   			ptstats_S2widthLowBot->Draw();
	c_S2WIDTHLOWbot->Update();




	//////////////////////////////////////////////////////////////////////////////////////
	// SAVE PLOTS
	char outFolder_dataset[500];
	sprintf(outFolder_dataset, "./plots/%s_%s", DataSet1, CutName);
	char mkdir_outFolder_dataset[500];
	sprintf(mkdir_outFolder_dataset, ".mkdir %s", outFolder_dataset);
	gROOT->ProcessLine(mkdir_outFolder_dataset);

	char outFolder_S1[500];
	sprintf(outFolder_S1, "%s/S1", outFolder_dataset);
	char mkdir_outFolder_S1[500];
	sprintf(mkdir_outFolder_S1, ".mkdir %s", outFolder_S1);
	gROOT->ProcessLine(mkdir_outFolder_S1);

	char outFolder_S2[500];
	sprintf(outFolder_S2, "%s/S2", outFolder_dataset);
	char mkdir_outFolder_S2[500];
	sprintf(mkdir_outFolder_S2, ".mkdir %s", outFolder_S2);
	gROOT->ProcessLine(mkdir_outFolder_S2);



	char char_NS2vsNS1[500];
	char char_S1[500];
	char char_S1_raw[500];
	char char_S1chi2vsS1top[500];
	char char_S1chi2vsS1bot[500];
	char char_S2[500];
	char char_S2_raw[500];
	//char char_S2TOP[500];
	//char char_S2BOT[500];
	char char_S2WIDTHtop[500];
	char char_S2WIDTHbot[500];
	char char_S2WIDTHLOWtop[500];
	char char_S2WIDTHLOWbot[500];
	char char_DT[500];
	char char_S1delay[500];
	char char_S2delay[500];
	char char_S2RATIOvsS2delay[500];
	char char_S2vsS1[500];
	char char_S2TOPvsS1[500];
	char char_S2TOPvsCS1[500];
	char char_S2BOTvsS1[500];
	char char_S2BOTvsS1TOP[500];
	char char_LOGS2S1vsS1[500];
	char char_LOGS2S1vsS1_scat[500];
	char char_LOGS2TOPS1vsS1[500];
	char char_LOGS2BOTS1vsS1[500];
	char char_LOGS2S1vsS1SUM[500];
	char char_S1vsS1[500];
	char char_S1vsS1_scat[500];
	char char_S1TOPvsS1TOP[500];
	char char_S1TOPvsS1TOP_scat[500];
	char char_S1BOTvsS1BOT[500];
	char char_S1BOTvsS1BOT_scat[500];
	char char_S2vsS2[500];
	char char_S2TOPvsS2TOP[500];
	char char_S2BOTvsS2BOT[500];
	char char_S2TOPvsS2BOT[500];
	char char_S1ASYMvsS1[500];
	char char_S1ASYM1vsS1[500];
	char char_S1ASYMvsDT[500];
	char char_S2ASYMvsS2[500];
	char char_S2ASYMvsS2TOP[500];
	char char_S2ASYMvsS1[500];
	char char_S2ASYMvsS1ASYM[500];
	char char_S1vsDT[500];
	char char_S1TOPvsDT[500];
	char char_S1BOTvsDT[500];
	char char_S1vsDT_toFit[500];
	char char_cS1vsDT[500];
	char char_S2vsDT[500];
	char char_S2TOPvsDT[500];
	char char_S2BOTvsDT[500];
	char char_S2WIDTHTOPvsDT[500];
	char char_S2WIDTHBOTvsDT[500];
	char char_S2WIDTHLOWTOPvsDT[500];
	char char_S2WIDTHLOWBOTvsDT[500];
	char char_S2WIDTHTOPvsS2TOP[500];
	char char_S2WIDTHBOTvsS2BOT[500];
	char char_S2WIDTHLOWTOPvsS2TOP[500];
	char char_S2WIDTHLOWBOTvsS2BOT[500];
	char char_S1WIDTHvsS1[500];
	char char_S1WIDTHLOWvsS1[500];
	char char_S2WIDTHoverHEIGHTTOPvsS2TOP[500];
	char char_S2WIDTHoverHEIGHTBOTvsS2BOT[500];
	char char_S2WIDTHLOWoverHEIGHTTOPvsS2TOP[500];
	char char_S2WIDTHLOWoverHEIGHTBOTvsS2BOT[500];
	char char_S2WIDTHvsHEIGHTTOP[500];
	char char_S2WIDTHvsHEIGHTBOT[500];
	char char_S2WIDTHLOWvsHEIGHTTOP[500];
	char char_S2WIDTHLOWvsHEIGHTBOT[500];
	char char_S2HEIGHTTOPvsS2TOP[500];
	char char_S2HEIGHTBOTvsS2BOT[500];
	char char_S2DELAYvsS1DELAY[500];

	char char_NS2vsNS1_C[500];					
	char char_S1_C[500];					
	char char_S1_raw_C[500];							
	char char_S1chi2vsS1top_C[500];
	char char_S1chi2vsS1bot_C[500];
	char char_S2_C[500];
	char char_S2_raw_C[500];
	//char char_S2TOP_C[500];
	//char char_S2BOT_C[500];
	char char_S2WIDTHtop_C[500];
	char char_S2WIDTHbot_C[500];
	char char_S2WIDTHLOWtop_C[500];
	char char_S2WIDTHLOWbot_C[500];
	char char_DT_C[500];
	char char_S1delay_C[500];
	char char_S2delay_C[500];
	char char_S2RATIOvsS2delay_C[500];
	char char_S2vsS1_C[500];
	char char_S2TOPvsS1_C[500];
	char char_S2TOPvsCS1_C[500];
	char char_S2BOTvsS1_C[500];
	char char_S2BOTvsS1TOP_C[500];
	char char_LOGS2S1vsS1_C[500];
	char char_LOGS2S1vsS1_scat_C[500];
	char char_LOGS2TOPS1vsS1_C[500];
	char char_LOGS2BOTS1vsS1_C[500];
	char char_LOGS2S1vsS1SUM_C[500];
	char char_S1vsS1_C[500];
	char char_S1vsS1_scat_C[500];
	char char_S1TOPvsS1TOP_C[500];
	char char_S1TOPvsS1TOP_scat_C[500];
	char char_S1BOTvsS1BOT_C[500];
	char char_S1BOTvsS1BOT_scat_C[500];
	char char_S2vsS2_C[500];
	char char_S2TOPvsS2TOP_C[500];
	char char_S2BOTvsS2BOT_C[500];
	char char_S2TOPvsS2BOT_C[500];
	char char_S1ASYMvsS1_C[500];
	char char_S1ASYM1vsS1_C[500];
	char char_S1ASYMvsDT_C[500];
	char char_S2ASYMvsS2_C[500];
	char char_S2ASYMvsS2TOP_C[500];
	char char_S2ASYMvsS1_C[500];
	char char_S2ASYMvsS1ASYM_C[500];
	char char_S1vsDT_C[500];
	char char_S1TOPvsDT_C[500];
	char char_S1BOTvsDT_C[500];
	char char_S1vsDT_toFit_C[500];
	char char_cS1vsDT_C[500];
	char char_S2vsDT_C[500];
	char char_S2TOPvsDT_C[500];
	char char_S2BOTvsDT_C[500];
	char char_S2WIDTHTOPvsDT_C[500];
	char char_S2WIDTHBOTvsDT_C[500];
	char char_S2WIDTHLOWTOPvsDT_C[500];
	char char_S2WIDTHLOWBOTvsDT_C[500];
	char char_S2WIDTHTOPvsS2TOP_C[500];
	char char_S2WIDTHBOTvsS2BOT_C[500];
	char char_S2WIDTHLOWTOPvsS2TOP_C[500];
	char char_S2WIDTHLOWBOTvsS2BOT_C[500];
	char char_S1WIDTHvsS1_C[500];
	char char_S1WIDTHLOWvsS1_C[500];
	char char_S2WIDTHoverHEIGHTTOPvsS2TOP_C[500];
	char char_S2WIDTHoverHEIGHTBOTvsS2BOT_C[500];
	char char_S2WIDTHLOWoverHEIGHTTOPvsS2TOP_C[500];
	char char_S2WIDTHLOWoverHEIGHTBOTvsS2BOT_C[500];
	char char_S2WIDTHvsHEIGHTTOP_C[500];
	char char_S2WIDTHvsHEIGHTBOT_C[500];
	char char_S2WIDTHLOWvsHEIGHTTOP_C[500];
	char char_S2WIDTHLOWvsHEIGHTBOT_C[500];
	char char_S2HEIGHTTOPvsS2TOP_C[500];
	char char_S2HEIGHTBOTvsS2BOT_C[500];
	char char_S2DELAYvsS1DELAY_C[500];

		
	//const char *extensionPlots = ".png";
	//const char *extensionPlots_C = ".C";

	sprintf(char_NS2vsNS1,							"%s/%s_NS2vsNS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1,								"%s/%s_S1_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1_raw,							"%s/%s_S1_raw_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1chi2vsS1top,						"%s/%s_S1chi2vsS1top_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1chi2vsS1bot,						"%s/%s_S1chi2vsS1bot_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2,								"%s/%s_S2_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2_raw,							"%s/%s_S2_raw_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	//sprintf(char_S2TOP,							"%s/%s_S2TOP_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots);
	//sprintf(char_S2BOT,							"%s/%s_S2BOT_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHtop,						"%s/%s_S2WIDTHtop_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHbot,						"%s/%s_S2WIDTHbot_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWtop,						"%s/%s_S2WIDTHLOWtop_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWbot,						"%s/%s_S2WIDTHLOWbot_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_DT,								"%s/%s_DT_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1delay,							"%s/%s_S1delay_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2delay,							"%s/%s_S2delay_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2RATIOvsS2delay,					"%s/%s_S2RATIOvsS2delay_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2vsS1,							"%s/%s_S2vsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2TOPvsS1,							"%s/%s_S2TOPvsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2TOPvsCS1,						"%s/%s_S2TOPvsCS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2BOTvsS1,							"%s/%s_S2BOTvsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2BOTvsS1TOP,						"%s/%s_S2BOTvsS1TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_LOGS2S1vsS1,						"%s/%s_LOGS2S1vsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_LOGS2S1vsS1_scat,					"%s/%s_LOGS2S1vsS1_scat_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_LOGS2TOPS1vsS1,					"%s/%s_LOGS2TOPS1vsS1_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_LOGS2BOTS1vsS1,					"%s/%s_LOGS2BOTS1vsS1_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_LOGS2S1vsS1SUM,					"%s/%s_LOGS2S1vsS1SUM_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1vsS1,							"%s/%s_S1vsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1vsS1_scat,						"%s/%s_S1vsS1_scat_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1TOPvsS1TOP,						"%s/%s_S1TOPvsS1TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1TOPvsS1TOP_scat,					"%s/%s_S1TOPvsS1TOP_scat_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1BOTvsS1BOT,						"%s/%s_S1BOTvsS1BOT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1BOTvsS1BOT_scat,					"%s/%s_S1BOTvsS1BOT_scat_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2vsS2,							"%s/%s_S2vsS2_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2TOPvsS2TOP,						"%s/%s_S2TOPvsS2TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2BOTvsS2BOT,						"%s/%s_S2BOTvsS2BOT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2TOPvsS2BOT,						"%s/%s_S2TOPvsS2BOT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1ASYMvsS1,						"%s/%s_S1ASYMvsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1ASYM1vsS1,						"%s/%s_S1ASYM1vsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1ASYMvsDT,						"%s/%s_S1ASYMvsDT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2ASYMvsS2,						"%s/%s_S2ASYMvsS2_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2ASYMvsS2TOP,						"%s/%s_S2ASYMvsS2TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2ASYMvsS1,						"%s/%s_S2ASYMvsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2ASYMvsS1ASYM,					"%s/%s_S2ASYMvsS1ASYM_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1vsDT,							"%s/%s_S1vsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1TOPvsDT,							"%s/%s_S1TOPvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1BOTvsDT,							"%s/%s_S1BOTvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1vsDT_toFit,						"%s/%s_S1vsDT_toFit_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_cS1vsDT,							"%s/%s_cS1vsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2vsDT,							"%s/%s_S2vsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2TOPvsDT,							"%s/%s_S2TOPvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2BOTvsDT,							"%s/%s_S2BOTvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHTOPvsDT,					"%s/%s_S2WIDTHTOPvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHBOTvsDT,					"%s/%s_S2WIDTHBOTvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWTOPvsDT,					"%s/%s_S2WIDTHLOWTOPvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWBOTvsDT,					"%s/%s_S2WIDTHLOWBOTvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHTOPvsS2TOP,					"%s/%s_S2WIDTHTOPvsS2TOP_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHBOTvsS2BOT,					"%s/%s_S2WIDTHBOTvsS2BOT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWTOPvsS2TOP,				"%s/%s_S2WIDTHLOWTOPvsS2TOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWBOTvsS2BOT,				"%s/%s_S2WIDTHLOWBOTvsS2BOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1WIDTHvsS1,						"%s/%s_S1WIDTHvsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S1WIDTHLOWvsS1,					"%s/%s_S1WIDTHLOWvsS1_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHoverHEIGHTTOPvsS2TOP,		"%s/%s_S2WIDTHoverHEIGHTTOPvsS2TOP_%s%s",		outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHoverHEIGHTBOTvsS2BOT,		"%s/%s_S2WIDTHoverHEIGHTBOTvsS2BOT_%s%s",		outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWoverHEIGHTTOPvsS2TOP,	"%s/%s_S2WIDTHLOWoverHEIGHTTOPvsS2TOP_%s%s",	outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWoverHEIGHTBOTvsS2BOT,	"%s/%s_S2WIDTHLOWoverHEIGHTBOTvsS2BOT_%s%s",	outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHvsHEIGHTTOP,				"%s/%s_S2WIDTHvsHEIGHTTOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHvsHEIGHTBOT,				"%s/%s_S2WIDTHvsHEIGHTBOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWvsHEIGHTTOP,				"%s/%s_S2WIDTHLOWvsHEIGHTTOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2WIDTHLOWvsHEIGHTBOT,				"%s/%s_S2WIDTHLOWvsHEIGHTBOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2HEIGHTTOPvsS2TOP,				"%s/%s_S2HEIGHTTOPvsS2TOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2HEIGHTBOTvsS2BOT,				"%s/%s_S2HEIGHTBOTvsS2BOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots);
	sprintf(char_S2DELAYvsS1DELAY,					"%s/%s_S2DELAYvsS1DELAY_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots);


	sprintf(char_NS2vsNS1_C,						"%s/%s_NS2vsNS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1_C,								"%s/%s_S1_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1_raw_C,							"%s/%s_S1_raw_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1chi2vsS1top_C,					"%s/%s_S1chi2vsS1top_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1chi2vsS1bot_C,					"%s/%s_S1chi2vsS1bot_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2_C,								"%s/%s_S2_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2_raw_C,							"%s/%s_S2_raw_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	//sprintf(char_S2TOP_C,							"%s/%s_S2TOP_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	//sprintf(char_S2BOT_C,							"%s/%s_S2BOT_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHtop_C,						"%s/%s_S2WIDTHtop_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHbot_C,						"%s/%s_S2WIDTHbot_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWtop_C,					"%s/%s_S2WIDTHLOWtop_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWbot_C,					"%s/%s_S2WIDTHLOWbot_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_DT_C,								"%s/%s_DT_%s%s",								outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1delay_C,							"%s/%s_S1delay_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2delay_C,							"%s/%s_S2delay_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2RATIOvsS2delay_C,				"%s/%s_S2RATIOvsS2delay_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2vsS1_C,							"%s/%s_S2vsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2TOPvsS1_C,						"%s/%s_S2TOPvsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2TOPvsCS1_C,						"%s/%s_S2TOPvsCS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2BOTvsS1_C,						"%s/%s_S2BOTvsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2BOTvsS1TOP_C,					"%s/%s_S2BOTvsS1TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_LOGS2S1vsS1_C,						"%s/%s_LOGS2S1vsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_LOGS2S1vsS1_scat_C,				"%s/%s_LOGS2S1vsS1_scat_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_LOGS2TOPS1vsS1_C,					"%s/%s_LOGS2TOPS1vsS1_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_LOGS2BOTS1vsS1_C,					"%s/%s_LOGS2BOTS1vsS1_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_LOGS2S1vsS1SUM_C,					"%s/%s_LOGS2S1vsS1SUM_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1vsS1_C,							"%s/%s_S1vsS1_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1vsS1_scat_C,						"%s/%s_S1vsS1_scat_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1TOPvsS1TOP_C,					"%s/%s_S1TOPvsS1TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1TOPvsS1TOP_scat_C,				"%s/%s_S1TOPvsS1TOP_scat_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1BOTvsS1BOT_C,					"%s/%s_S1BOTvsS1BOT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1BOTvsS1BOT_scat_C,				"%s/%s_S1BOTvsS1BOT_scat_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2vsS2_C,							"%s/%s_S2vsS2_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2TOPvsS2TOP_C,					"%s/%s_S2TOPvsS2TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2BOTvsS2BOT_C,					"%s/%s_S2BOTvsS2BOT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2TOPvsS2BOT_C,					"%s/%s_S2TOPvsS2BOT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1ASYMvsS1_C,						"%s/%s_S1ASYMvsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1ASYM1vsS1_C,						"%s/%s_S1ASYM1vsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1ASYMvsDT_C,						"%s/%s_S1ASYMvsDT_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2ASYMvsS2_C,						"%s/%s_S2ASYMvsS2_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2ASYMvsS2TOP_C,					"%s/%s_S2ASYMvsS2TOP_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2ASYMvsS1_C,						"%s/%s_S2ASYMvsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2ASYMvsS1ASYM_C,					"%s/%s_S2ASYMvsS1ASYM_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1vsDT_C,							"%s/%s_S1vsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1TOPvsDT_C,						"%s/%s_S1TOPvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1BOTvsDT_C,						"%s/%s_S1BOTvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1vsDT_toFit_C,					"%s/%s_S1vsDT_toFit_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_cS1vsDT_C,							"%s/%s_cS1vsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2vsDT_C,							"%s/%s_S2vsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2TOPvsDT_C,						"%s/%s_S2TOPvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2BOTvsDT_C,						"%s/%s_S2BOTvsDT_%s%s",							outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHTOPvsDT_C,					"%s/%s_S2WIDTHTOPvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHBOTvsDT_C,					"%s/%s_S2WIDTHBOTvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWTOPvsDT_C,				"%s/%s_S2WIDTHLOWTOPvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWBOTvsDT_C,				"%s/%s_S2WIDTHLOWBOTvsDT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHTOPvsS2TOP_C,				"%s/%s_S2WIDTHTOPvsS2TOP_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHBOTvsS2BOT_C,				"%s/%s_S2WIDTHBOTvsS2BOT_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWTOPvsS2TOP_C,			"%s/%s_S2WIDTHLOWTOPvsS2TOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWBOTvsS2BOT_C,			"%s/%s_S2WIDTHLOWBOTvsS2BOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1WIDTHvsS1_C,						"%s/%s_S1WIDTHvsS1_%s%s",						outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S1WIDTHLOWvsS1_C,					"%s/%s_S1WIDTHLOWvsS1_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHoverHEIGHTTOPvsS2TOP_C,		"%s/%s_S2WIDTHoverHEIGHTTOPvsS2TOP_%s%s",		outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHoverHEIGHTBOTvsS2BOT_C,		"%s/%s_S2WIDTHoverHEIGHTBOTvsS2BOT_%s%s",		outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWoverHEIGHTTOPvsS2TOP_C,	"%s/%s_S2WIDTHLOWoverHEIGHTTOPvsS2TOP_%s%s",	outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWoverHEIGHTBOTvsS2BOT_C,	"%s/%s_S2WIDTHLOWoverHEIGHTBOTvsS2BOT_%s%s",	outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHvsHEIGHTTOP_C,				"%s/%s_S2WIDTHvsHEIGHTTOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHvsHEIGHTBOT_C,				"%s/%s_S2WIDTHvsHEIGHTBOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWvsHEIGHTTOP_C,			"%s/%s_S2WIDTHLOWvsHEIGHTTOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2WIDTHLOWvsHEIGHTBOT_C,			"%s/%s_S2WIDTHLOWvsHEIGHTBOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2HEIGHTTOPvsS2TOP_C,				"%s/%s_S2HEIGHTTOPvsS2TOP_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2HEIGHTBOTvsS2BOT_C,				"%s/%s_S2HEIGHTBOTvsS2BOT_%s%s",				outFolder_dataset, DataSet1, CutName, extensionPlots_C);
	sprintf(char_S2DELAYvsS1DELAY_C,				"%s/%s_S2DELAYvsS1DELAY_%s%s",					outFolder_dataset, DataSet1, CutName, extensionPlots_C);



	//c_NS2vsNS1						->SaveAs(char_NS2vsNS1);
	c_S1								->SaveAs(char_S1);
	c_S1_raw							->SaveAs(char_S1_raw);
	c_S1chi2vsS1top						->SaveAs(char_S1chi2vsS1top);
	c_S1chi2vsS1bot						->SaveAs(char_S1chi2vsS1bot);
	c_S2								->SaveAs(char_S2);
	c_S2_raw							->SaveAs(char_S2_raw);
	//c_S2TOP							->SaveAs(char_S2TOP);
	//c_S2BOT							->SaveAs(char_S2BOT);
	c_S2WIDTHtop						->SaveAs(char_S2WIDTHtop);
	c_S2WIDTHbot						->SaveAs(char_S2WIDTHbot);
	c_S2WIDTHLOWtop						->SaveAs(char_S2WIDTHLOWtop);
	c_S2WIDTHLOWbot						->SaveAs(char_S2WIDTHLOWbot);
	c_DT								->SaveAs(char_DT);
	c_S1delay							->SaveAs(char_S1delay);
	c_S2delay							->SaveAs(char_S2delay);
	c_S2RATIOvsS2delay					->SaveAs(char_S2RATIOvsS2delay);
	c_S2vsS1							->SaveAs(char_S2vsS1);
	c_S2TOPvsS1							->SaveAs(char_S2TOPvsS1);
	c_S2TOPvsCS1						->SaveAs(char_S2TOPvsCS1);
	c_S2BOTvsS1							->SaveAs(char_S2BOTvsS1);
	c_S2BOTvsS1TOP						->SaveAs(char_S2BOTvsS1TOP);
	c_LOGS2S1vsS1						->SaveAs(char_LOGS2S1vsS1);
	//c_LOGS2S1vsS1_scat					->SaveAs(char_LOGS2S1vsS1_scat);
	c_LOGS2TOPS1vsS1					->SaveAs(char_LOGS2TOPS1vsS1);
	c_LOGS2BOTS1vsS1					->SaveAs(char_LOGS2BOTS1vsS1);
	c_LOGS2S1vsS1SUM					->SaveAs(char_LOGS2S1vsS1SUM);
	c_S1vsS1							->SaveAs(char_S1vsS1);
	c_S1vsS1_scat						->SaveAs(char_S1vsS1_scat);
	c_S1TOPvsS1TOP						->SaveAs(char_S1TOPvsS1TOP);
	c_S1TOPvsS1TOP_scat					->SaveAs(char_S1TOPvsS1TOP_scat);
	c_S1BOTvsS1BOT						->SaveAs(char_S1BOTvsS1BOT);
	c_S1BOTvsS1BOT_scat					->SaveAs(char_S1BOTvsS1BOT_scat);
	c_S2vsS2							->SaveAs(char_S2vsS2);
	c_S2TOPvsS2TOP						->SaveAs(char_S2TOPvsS2TOP);
	c_S2BOTvsS2BOT						->SaveAs(char_S2BOTvsS2BOT);
	c_S2TOPvsS2BOT						->SaveAs(char_S2TOPvsS2BOT);
	c_S1ASYMvsS1						->SaveAs(char_S1ASYMvsS1);
	c_S1ASYM1vsS1						->SaveAs(char_S1ASYM1vsS1);
	c_S1ASYMvsDT						->SaveAs(char_S1ASYMvsDT);
	c_S2ASYMvsS2						->SaveAs(char_S2ASYMvsS2);
	c_S2ASYMvsS2TOP						->SaveAs(char_S2ASYMvsS2TOP);
	c_S2ASYMvsS1						->SaveAs(char_S2ASYMvsS1);
	c_S2ASYMvsS1ASYM					->SaveAs(char_S2ASYMvsS1ASYM);
	c_S1vsDT							->SaveAs(char_S1vsDT);
	c_S1TOPvsDT							->SaveAs(char_S1TOPvsDT);
	c_S1BOTvsDT							->SaveAs(char_S1BOTvsDT);
	c_S1vsDT_toFit						->SaveAs(char_S1vsDT_toFit);
	c_cS1vsDT							->SaveAs(char_cS1vsDT);
	c_S2vsDT							->SaveAs(char_S2vsDT);
	c_S2TOPvsDT							->SaveAs(char_S2TOPvsDT);
	c_S2BOTvsDT							->SaveAs(char_S2BOTvsDT);
	c_S2WIDTHTOPvsDT					->SaveAs(char_S2WIDTHTOPvsDT);
	c_S2WIDTHBOTvsDT					->SaveAs(char_S2WIDTHBOTvsDT);
	c_S2WIDTHLOWTOPvsDT					->SaveAs(char_S2WIDTHLOWTOPvsDT);
	c_S2WIDTHLOWBOTvsDT					->SaveAs(char_S2WIDTHLOWBOTvsDT);
	c_S2WIDTHTOPvsS2TOP					->SaveAs(char_S2WIDTHTOPvsS2TOP);
	c_S2WIDTHBOTvsS2BOT					->SaveAs(char_S2WIDTHBOTvsS2BOT);
	c_S2WIDTHLOWTOPvsS2TOP				->SaveAs(char_S2WIDTHLOWTOPvsS2TOP);
	c_S2WIDTHLOWBOTvsS2BOT				->SaveAs(char_S2WIDTHLOWBOTvsS2BOT);
	c_S1WIDTHvsS1						->SaveAs(char_S1WIDTHvsS1);
	c_S1WIDTHLOWvsS1					->SaveAs(char_S1WIDTHLOWvsS1);
	c_S2WIDTHoverHEIGHTTOPvsS2TOP		->SaveAs(char_S2WIDTHoverHEIGHTTOPvsS2TOP);
	c_S2WIDTHoverHEIGHTBOTvsS2BOT		->SaveAs(char_S2WIDTHoverHEIGHTBOTvsS2BOT);
	c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	->SaveAs(char_S2WIDTHLOWoverHEIGHTTOPvsS2TOP);
	c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT	->SaveAs(char_S2WIDTHLOWoverHEIGHTBOTvsS2BOT);
	c_S2WIDTHvsHEIGHTTOP				->SaveAs(char_S2WIDTHvsHEIGHTTOP);
	c_S2WIDTHvsHEIGHTBOT				->SaveAs(char_S2WIDTHvsHEIGHTBOT);
	c_S2WIDTHLOWvsHEIGHTTOP				->SaveAs(char_S2WIDTHLOWvsHEIGHTTOP);
	c_S2WIDTHLOWvsHEIGHTBOT				->SaveAs(char_S2WIDTHLOWvsHEIGHTBOT);
	c_S2HEIGHTTOPvsS2TOP				->SaveAs(char_S2HEIGHTTOPvsS2TOP);
	c_S2HEIGHTBOTvsS2BOT				->SaveAs(char_S2HEIGHTBOTvsS2BOT);
	c_S2DELAYvsS1DELAY					->SaveAs(char_S2DELAYvsS1DELAY);

	//c_NS2vsNS1						->SaveAs(char_NS2vsNS1_C);
	c_S1								->SaveAs(char_S1_C);
	c_S1_raw							->SaveAs(char_S1_raw_C);
	c_S1chi2vsS1top						->SaveAs(char_S1chi2vsS1top_C);
	c_S1chi2vsS1bot						->SaveAs(char_S1chi2vsS1bot_C);
	c_S2								->SaveAs(char_S2_C);
	c_S2_raw							->SaveAs(char_S2_raw_C);
	//c_S2TOP							->SaveAs(char_S2TOP_C);
	//c_S2BOT							->SaveAs(char_S2BOT_C);
	c_S2WIDTHtop						->SaveAs(char_S2WIDTHtop_C);
	c_S2WIDTHbot						->SaveAs(char_S2WIDTHbot_C);
	c_S2WIDTHLOWtop						->SaveAs(char_S2WIDTHLOWtop_C);
	c_S2WIDTHLOWbot						->SaveAs(char_S2WIDTHLOWbot_C);
	c_DT								->SaveAs(char_DT_C);
	c_S1delay							->SaveAs(char_S1delay_C);
	c_S2delay							->SaveAs(char_S2delay_C);
	c_S2RATIOvsS2delay					->SaveAs(char_S2RATIOvsS2delay_C);
	c_S2vsS1							->SaveAs(char_S2vsS1_C);
	c_S2TOPvsS1							->SaveAs(char_S2TOPvsS1_C);
	c_S2TOPvsCS1						->SaveAs(char_S2TOPvsCS1_C);
	c_S2BOTvsS1							->SaveAs(char_S2BOTvsS1_C);
	c_S2BOTvsS1TOP						->SaveAs(char_S2BOTvsS1TOP_C);
	c_LOGS2S1vsS1						->SaveAs(char_LOGS2S1vsS1_C);
	//c_LOGS2S1vsS1_scat					->SaveAs(char_LOGS2S1vsS1_scat_C);
	c_LOGS2TOPS1vsS1					->SaveAs(char_LOGS2TOPS1vsS1_C);
	c_LOGS2BOTS1vsS1					->SaveAs(char_LOGS2BOTS1vsS1_C);
	c_LOGS2S1vsS1SUM					->SaveAs(char_LOGS2S1vsS1SUM_C);
	c_S1vsS1							->SaveAs(char_S1vsS1_C);
	//c_S1vsS1_scat						->SaveAs(char_S1vsS1_scat_C);
	c_S1TOPvsS1TOP						->SaveAs(char_S1TOPvsS1TOP_C);
	//c_S1TOPvsS1TOP_scat					->SaveAs(char_S1TOPvsS1TOP_scat_C);
	c_S1BOTvsS1BOT						->SaveAs(char_S1BOTvsS1BOT_C);
	//c_S1BOTvsS1BOT_scat					->SaveAs(char_S1BOTvsS1BOT_scat_C);
	c_S2vsS2							->SaveAs(char_S2vsS2_C);
	c_S2TOPvsS2TOP						->SaveAs(char_S2TOPvsS2TOP_C);
	c_S2BOTvsS2BOT						->SaveAs(char_S2BOTvsS2BOT_C);
	c_S2TOPvsS2BOT						->SaveAs(char_S2TOPvsS2BOT_C);
	c_S1ASYMvsS1						->SaveAs(char_S1ASYMvsS1_C);
	c_S1ASYM1vsS1						->SaveAs(char_S1ASYM1vsS1_C);
	c_S1ASYMvsDT						->SaveAs(char_S1ASYMvsDT_C);
	c_S2ASYMvsS2						->SaveAs(char_S2ASYMvsS2_C);
	c_S2ASYMvsS2TOP						->SaveAs(char_S2ASYMvsS2TOP_C);
	c_S2ASYMvsS1						->SaveAs(char_S2ASYMvsS1_C);
	c_S2ASYMvsS1ASYM					->SaveAs(char_S2ASYMvsS1ASYM_C);
	c_S1vsDT							->SaveAs(char_S1vsDT_C);
	c_S1TOPvsDT							->SaveAs(char_S1TOPvsDT_C);
	c_S1BOTvsDT							->SaveAs(char_S1BOTvsDT_C);
	c_S1vsDT_toFit						->SaveAs(char_S1vsDT_toFit_C);
	c_cS1vsDT							->SaveAs(char_cS1vsDT_C);
	c_S2vsDT							->SaveAs(char_S2vsDT_C);
	c_S2TOPvsDT							->SaveAs(char_S2TOPvsDT_C);
	c_S2BOTvsDT							->SaveAs(char_S2BOTvsDT_C);
	c_S2WIDTHTOPvsDT					->SaveAs(char_S2WIDTHTOPvsDT_C);
	c_S2WIDTHBOTvsDT					->SaveAs(char_S2WIDTHBOTvsDT_C);
	c_S2WIDTHLOWTOPvsDT					->SaveAs(char_S2WIDTHLOWTOPvsDT_C);
	c_S2WIDTHLOWBOTvsDT					->SaveAs(char_S2WIDTHLOWBOTvsDT_C);
	c_S2WIDTHTOPvsS2TOP					->SaveAs(char_S2WIDTHTOPvsS2TOP_C);
	c_S2WIDTHBOTvsS2BOT					->SaveAs(char_S2WIDTHBOTvsS2BOT_C);
	c_S2WIDTHLOWTOPvsS2TOP				->SaveAs(char_S2WIDTHLOWTOPvsS2TOP_C);
	c_S2WIDTHLOWBOTvsS2BOT				->SaveAs(char_S2WIDTHLOWBOTvsS2BOT_C);
	c_S1WIDTHvsS1						->SaveAs(char_S1WIDTHvsS1_C);
	c_S1WIDTHLOWvsS1					->SaveAs(char_S1WIDTHLOWvsS1_C);
	c_S2WIDTHoverHEIGHTTOPvsS2TOP		->SaveAs(char_S2WIDTHoverHEIGHTTOPvsS2TOP_C);
	c_S2WIDTHoverHEIGHTBOTvsS2BOT		->SaveAs(char_S2WIDTHoverHEIGHTBOTvsS2BOT_C);
	c_S2WIDTHLOWoverHEIGHTTOPvsS2TOP	->SaveAs(char_S2WIDTHLOWoverHEIGHTTOPvsS2TOP_C);
	c_S2WIDTHLOWoverHEIGHTBOTvsS2BOT	->SaveAs(char_S2WIDTHLOWoverHEIGHTBOTvsS2BOT_C);
	c_S2WIDTHvsHEIGHTTOP				->SaveAs(char_S2WIDTHvsHEIGHTTOP_C);
	c_S2WIDTHvsHEIGHTBOT				->SaveAs(char_S2WIDTHvsHEIGHTBOT_C);
	c_S2WIDTHLOWvsHEIGHTTOP				->SaveAs(char_S2WIDTHLOWvsHEIGHTTOP_C);
	c_S2WIDTHLOWvsHEIGHTBOT				->SaveAs(char_S2WIDTHLOWvsHEIGHTBOT_C);
	c_S2HEIGHTTOPvsS2TOP				->SaveAs(char_S2HEIGHTTOPvsS2TOP_C);
	c_S2HEIGHTBOTvsS2BOT				->SaveAs(char_S2HEIGHTBOTvsS2BOT_C);
	c_S2DELAYvsS1DELAY					->SaveAs(char_S2DELAYvsS1DELAY_C);
